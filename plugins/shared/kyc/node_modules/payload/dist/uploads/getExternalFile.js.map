{"version":3,"sources":["../../src/uploads/getExternalFile.ts"],"sourcesContent":["import type { PayloadRequest } from '../types/index.js'\nimport type { File, FileData, UploadConfig } from './types.js'\n\nimport { APIError } from '../errors/index.js'\nimport { isURLAllowed } from '../utilities/isURLAllowed.js'\nimport { safeFetch } from './safeFetch.js'\n\ntype Args = {\n  data: FileData\n  req: PayloadRequest\n  uploadConfig: UploadConfig\n}\nexport const getExternalFile = async ({ data, req, uploadConfig }: Args): Promise<File> => {\n  const { filename, url } = data\n\n  if (typeof url === 'string') {\n    let fileURL = url\n    if (!url.startsWith('http')) {\n      const baseUrl = req.headers.get('origin') || `${req.protocol}://${req.headers.get('host')}`\n      fileURL = `${baseUrl}${url}`\n    }\n\n    const headers = uploadConfig.externalFileHeaderFilter\n      ? uploadConfig.externalFileHeaderFilter(Object.fromEntries(new Headers(req.headers)))\n      : { cookie: req.headers.get('cookie')! }\n\n    // Check if URL is allowed because of skipSafeFetch allowList\n    const skipSafeFetch: boolean =\n      uploadConfig.skipSafeFetch === true\n        ? uploadConfig.skipSafeFetch\n        : Array.isArray(uploadConfig.skipSafeFetch) &&\n          isURLAllowed(fileURL, uploadConfig.skipSafeFetch)\n\n    // Check if URL is allowed because of pasteURL allowList\n    const isAllowedPasteUrl: boolean | undefined =\n      uploadConfig.pasteURL &&\n      uploadConfig.pasteURL.allowList &&\n      isURLAllowed(fileURL, uploadConfig.pasteURL.allowList)\n\n    let res\n    if (skipSafeFetch || isAllowedPasteUrl) {\n      // Allowed\n      res = await fetch(fileURL, {\n        credentials: 'include',\n        headers,\n        method: 'GET',\n      })\n    } else {\n      // Default\n      res = await safeFetch(fileURL, {\n        credentials: 'include',\n        headers,\n        method: 'GET',\n      })\n    }\n\n    if (!res.ok) {\n      throw new APIError(`Failed to fetch file from ${fileURL}`, res.status)\n    }\n\n    const data = await res.arrayBuffer()\n\n    return {\n      name: filename,\n      data: Buffer.from(data),\n      mimetype: res.headers.get('content-type') || undefined!,\n      size: Number(res.headers.get('content-length')) || 0,\n    }\n  }\n\n  throw new APIError('Invalid file url', 400)\n}\n"],"names":["APIError","isURLAllowed","safeFetch","getExternalFile","data","req","uploadConfig","filename","url","fileURL","startsWith","baseUrl","headers","get","protocol","externalFileHeaderFilter","Object","fromEntries","Headers","cookie","skipSafeFetch","Array","isArray","isAllowedPasteUrl","pasteURL","allowList","res","fetch","credentials","method","ok","status","arrayBuffer","name","Buffer","from","mimetype","undefined","size","Number"],"mappings":"AAGA,SAASA,QAAQ,QAAQ,qBAAoB;AAC7C,SAASC,YAAY,QAAQ,+BAA8B;AAC3D,SAASC,SAAS,QAAQ,iBAAgB;AAO1C,OAAO,MAAMC,kBAAkB,OAAO,EAAEC,IAAI,EAAEC,GAAG,EAAEC,YAAY,EAAQ;IACrE,MAAM,EAAEC,QAAQ,EAAEC,GAAG,EAAE,GAAGJ;IAE1B,IAAI,OAAOI,QAAQ,UAAU;QAC3B,IAAIC,UAAUD;QACd,IAAI,CAACA,IAAIE,UAAU,CAAC,SAAS;YAC3B,MAAMC,UAAUN,IAAIO,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGR,IAAIS,QAAQ,CAAC,GAAG,EAAET,IAAIO,OAAO,CAACC,GAAG,CAAC,SAAS;YAC3FJ,UAAU,GAAGE,UAAUH,KAAK;QAC9B;QAEA,MAAMI,UAAUN,aAAaS,wBAAwB,GACjDT,aAAaS,wBAAwB,CAACC,OAAOC,WAAW,CAAC,IAAIC,QAAQb,IAAIO,OAAO,MAChF;YAAEO,QAAQd,IAAIO,OAAO,CAACC,GAAG,CAAC;QAAW;QAEzC,6DAA6D;QAC7D,MAAMO,gBACJd,aAAac,aAAa,KAAK,OAC3Bd,aAAac,aAAa,GAC1BC,MAAMC,OAAO,CAAChB,aAAac,aAAa,KACxCnB,aAAaQ,SAASH,aAAac,aAAa;QAEtD,wDAAwD;QACxD,MAAMG,oBACJjB,aAAakB,QAAQ,IACrBlB,aAAakB,QAAQ,CAACC,SAAS,IAC/BxB,aAAaQ,SAASH,aAAakB,QAAQ,CAACC,SAAS;QAEvD,IAAIC;QACJ,IAAIN,iBAAiBG,mBAAmB;YACtC,UAAU;YACVG,MAAM,MAAMC,MAAMlB,SAAS;gBACzBmB,aAAa;gBACbhB;gBACAiB,QAAQ;YACV;QACF,OAAO;YACL,UAAU;YACVH,MAAM,MAAMxB,UAAUO,SAAS;gBAC7BmB,aAAa;gBACbhB;gBACAiB,QAAQ;YACV;QACF;QAEA,IAAI,CAACH,IAAII,EAAE,EAAE;YACX,MAAM,IAAI9B,SAAS,CAAC,0BAA0B,EAAES,SAAS,EAAEiB,IAAIK,MAAM;QACvE;QAEA,MAAM3B,OAAO,MAAMsB,IAAIM,WAAW;QAElC,OAAO;YACLC,MAAM1B;YACNH,MAAM8B,OAAOC,IAAI,CAAC/B;YAClBgC,UAAUV,IAAId,OAAO,CAACC,GAAG,CAAC,mBAAmBwB;YAC7CC,MAAMC,OAAOb,IAAId,OAAO,CAACC,GAAG,CAAC,sBAAsB;QACrD;IACF;IAEA,MAAM,IAAIb,SAAS,oBAAoB;AACzC,EAAC"}