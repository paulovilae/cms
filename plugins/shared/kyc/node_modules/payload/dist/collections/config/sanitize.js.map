{"version":3,"sources":["../../../src/collections/config/sanitize.ts"],"sourcesContent":["import type { Config, SanitizedConfig } from '../../config/types.js'\nimport type {\n  CollectionConfig,\n  SanitizedCollectionConfig,\n  SanitizedJoin,\n  SanitizedJoins,\n} from './types.js'\n\nimport { authCollectionEndpoints } from '../../auth/endpoints/index.js'\nimport { getBaseAuthFields } from '../../auth/getAuthFields.js'\nimport { TimestampsRequired } from '../../errors/TimestampsRequired.js'\nimport { sanitizeFields } from '../../fields/config/sanitize.js'\nimport { fieldAffectsData } from '../../fields/config/types.js'\nimport { mergeBaseFields } from '../../fields/mergeBaseFields.js'\nimport { uploadCollectionEndpoints } from '../../uploads/endpoints/index.js'\nimport { getBaseUploadFields } from '../../uploads/getBaseFields.js'\nimport { flattenAllFields } from '../../utilities/flattenAllFields.js'\nimport { formatLabels } from '../../utilities/formatLabels.js'\nimport { baseVersionFields } from '../../versions/baseFields.js'\nimport { versionDefaults } from '../../versions/defaults.js'\nimport { defaultCollectionEndpoints } from '../endpoints/index.js'\nimport {\n  addDefaultsToAuthConfig,\n  addDefaultsToCollectionConfig,\n  addDefaultsToLoginWithUsernameConfig,\n} from './defaults.js'\nimport { sanitizeCompoundIndexes } from './sanitizeCompoundIndexes.js'\nimport { validateUseAsTitle } from './useAsTitle.js'\n\nexport const sanitizeCollection = async (\n  config: Config,\n  collection: CollectionConfig,\n  /**\n   * If this property is set, RichText fields won't be sanitized immediately. Instead, they will be added to this array as promises\n   * so that you can sanitize them together, after the config has been sanitized.\n   */\n  richTextSanitizationPromises?: Array<(config: SanitizedConfig) => Promise<void>>,\n  _validRelationships?: string[],\n): Promise<SanitizedCollectionConfig> => {\n  if (collection._sanitized) {\n    return collection as SanitizedCollectionConfig\n  }\n\n  collection._sanitized = true\n\n  // /////////////////////////////////\n  // Make copy of collection config\n  // /////////////////////////////////\n\n  const sanitized: CollectionConfig = addDefaultsToCollectionConfig(collection)\n\n  // /////////////////////////////////\n  // Sanitize fields\n  // /////////////////////////////////\n\n  const validRelationships = _validRelationships ?? config.collections!.map((c) => c.slug) ?? []\n\n  const joins: SanitizedJoins = {}\n\n  const polymorphicJoins: SanitizedJoin[] = []\n\n  sanitized.fields = await sanitizeFields({\n    collectionConfig: sanitized,\n    config,\n    fields: sanitized.fields,\n    joinPath: '',\n    joins,\n    parentIsLocalized: false,\n    polymorphicJoins,\n    richTextSanitizationPromises,\n    validRelationships,\n  })\n\n  if (sanitized.endpoints !== false) {\n    if (!sanitized.endpoints) {\n      sanitized.endpoints = []\n    }\n\n    if (sanitized.auth) {\n      for (const endpoint of authCollectionEndpoints) {\n        sanitized.endpoints.push(endpoint)\n      }\n    }\n\n    if (sanitized.upload) {\n      for (const endpoint of uploadCollectionEndpoints) {\n        sanitized.endpoints.push(endpoint)\n      }\n    }\n\n    for (const endpoint of defaultCollectionEndpoints) {\n      sanitized.endpoints.push(endpoint)\n    }\n  }\n\n  if (sanitized.timestamps !== false) {\n    // add default timestamps fields only as needed\n    let hasUpdatedAt: boolean | null = null\n    let hasCreatedAt: boolean | null = null\n\n    sanitized.fields.some((field) => {\n      if (fieldAffectsData(field)) {\n        if (field.name === 'updatedAt') {\n          hasUpdatedAt = true\n        }\n\n        if (field.name === 'createdAt') {\n          hasCreatedAt = true\n        }\n      }\n\n      return hasCreatedAt && hasUpdatedAt\n    })\n\n    if (!hasUpdatedAt) {\n      sanitized.fields.push({\n        name: 'updatedAt',\n        type: 'date',\n        admin: {\n          disableBulkEdit: true,\n          hidden: true,\n        },\n        index: true,\n        label: ({ t }) => t('general:updatedAt'),\n      })\n    }\n\n    if (!hasCreatedAt) {\n      sanitized.fields.push({\n        name: 'createdAt',\n        admin: {\n          disableBulkEdit: true,\n          hidden: true,\n        },\n        // The default sort for list view is createdAt. Thus, enabling indexing by default, is a major performance improvement, especially for large or a large amount of collections.\n        type: 'date',\n        index: true,\n        label: ({ t }) => t('general:createdAt'),\n      })\n    }\n  }\n\n  sanitized.labels = sanitized.labels || formatLabels(sanitized.slug)\n\n  if (sanitized.versions) {\n    if (sanitized.versions === true) {\n      sanitized.versions = { drafts: false, maxPerDoc: 100 }\n    }\n\n    if (sanitized.timestamps === false) {\n      throw new TimestampsRequired(collection)\n    }\n\n    sanitized.versions.maxPerDoc =\n      typeof sanitized.versions.maxPerDoc === 'number' ? sanitized.versions.maxPerDoc : 100\n\n    if (sanitized.versions.drafts) {\n      if (sanitized.versions.drafts === true) {\n        sanitized.versions.drafts = {\n          autosave: false,\n          validate: false,\n        }\n      }\n\n      if (sanitized.versions.drafts.autosave === true) {\n        sanitized.versions.drafts.autosave = {\n          interval: versionDefaults.autosaveInterval,\n        }\n      }\n\n      if (sanitized.versions.drafts.validate === undefined) {\n        sanitized.versions.drafts.validate = false\n      }\n\n      sanitized.fields = mergeBaseFields(sanitized.fields, baseVersionFields)\n    }\n  }\n\n  if (sanitized.folders === true) {\n    sanitized.folders = {\n      browseByFolder: true,\n    }\n  } else if (sanitized.folders) {\n    sanitized.folders.browseByFolder = sanitized.folders.browseByFolder ?? true\n  }\n\n  if (sanitized.upload) {\n    if (sanitized.upload === true) {\n      sanitized.upload = {}\n    }\n\n    sanitized.upload.cacheTags = sanitized.upload?.cacheTags ?? true\n    sanitized.upload.bulkUpload = sanitized.upload?.bulkUpload ?? true\n    sanitized.upload.staticDir = sanitized.upload.staticDir || sanitized.slug\n    sanitized.admin!.useAsTitle =\n      sanitized.admin?.useAsTitle && sanitized.admin.useAsTitle !== 'id'\n        ? sanitized.admin.useAsTitle\n        : 'filename'\n\n    const uploadFields = getBaseUploadFields({\n      collection: sanitized,\n      config,\n    })\n\n    sanitized.fields = mergeBaseFields(sanitized.fields, uploadFields)\n  }\n\n  if (sanitized.auth) {\n    sanitized.auth = addDefaultsToAuthConfig(\n      typeof sanitized.auth === 'boolean' ? {} : sanitized.auth,\n    )\n\n    // disable duplicate for auth enabled collections by default\n    sanitized.disableDuplicate = sanitized.disableDuplicate ?? true\n\n    if (sanitized.auth.loginWithUsername) {\n      if (sanitized.auth.loginWithUsername === true) {\n        sanitized.auth.loginWithUsername = addDefaultsToLoginWithUsernameConfig({})\n      } else {\n        const loginWithUsernameWithDefaults = addDefaultsToLoginWithUsernameConfig(\n          sanitized.auth.loginWithUsername,\n        )\n\n        // if allowEmailLogin is false, requireUsername must be true\n        if (loginWithUsernameWithDefaults.allowEmailLogin === false) {\n          loginWithUsernameWithDefaults.requireUsername = true\n        }\n        sanitized.auth.loginWithUsername = loginWithUsernameWithDefaults\n      }\n    } else {\n      sanitized.auth.loginWithUsername = false\n    }\n\n    if (!collection?.admin?.useAsTitle) {\n      sanitized.admin!.useAsTitle = sanitized.auth.loginWithUsername ? 'username' : 'email'\n    }\n\n    sanitized.fields = mergeBaseFields(sanitized.fields, getBaseAuthFields(sanitized.auth))\n  }\n\n  if (collection?.admin?.pagination?.limits?.length) {\n    sanitized.admin!.pagination!.limits = collection.admin.pagination.limits\n  }\n\n  validateUseAsTitle(sanitized)\n\n  const sanitizedConfig = sanitized as SanitizedCollectionConfig\n\n  sanitizedConfig.joins = joins\n  sanitizedConfig.polymorphicJoins = polymorphicJoins\n\n  sanitizedConfig.flattenedFields = flattenAllFields({ fields: sanitizedConfig.fields })\n\n  sanitizedConfig.sanitizedIndexes = sanitizeCompoundIndexes({\n    fields: sanitizedConfig.flattenedFields,\n    indexes: sanitizedConfig.indexes,\n  })\n\n  return sanitizedConfig\n}\n"],"names":["authCollectionEndpoints","getBaseAuthFields","TimestampsRequired","sanitizeFields","fieldAffectsData","mergeBaseFields","uploadCollectionEndpoints","getBaseUploadFields","flattenAllFields","formatLabels","baseVersionFields","versionDefaults","defaultCollectionEndpoints","addDefaultsToAuthConfig","addDefaultsToCollectionConfig","addDefaultsToLoginWithUsernameConfig","sanitizeCompoundIndexes","validateUseAsTitle","sanitizeCollection","config","collection","richTextSanitizationPromises","_validRelationships","_sanitized","sanitized","validRelationships","collections","map","c","slug","joins","polymorphicJoins","fields","collectionConfig","joinPath","parentIsLocalized","endpoints","auth","endpoint","push","upload","timestamps","hasUpdatedAt","hasCreatedAt","some","field","name","type","admin","disableBulkEdit","hidden","index","label","t","labels","versions","drafts","maxPerDoc","autosave","validate","interval","autosaveInterval","undefined","folders","browseByFolder","cacheTags","bulkUpload","staticDir","useAsTitle","uploadFields","disableDuplicate","loginWithUsername","loginWithUsernameWithDefaults","allowEmailLogin","requireUsername","pagination","limits","length","sanitizedConfig","flattenedFields","sanitizedIndexes","indexes"],"mappings":"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"}