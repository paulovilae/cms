{"version":3,"sources":["../../../src/collections/operations/findVersions.ts"],"sourcesContent":["import type { AccessResult } from '../../config/types.js'\nimport type { PaginatedDocs } from '../../database/types.js'\nimport type { PayloadRequest, PopulateType, SelectType, Sort, Where } from '../../types/index.js'\nimport type { TypeWithVersion } from '../../versions/types.js'\nimport type { Collection } from '../config/types.js'\n\nimport { executeAccess } from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport { sanitizeWhereQuery } from '../../database/sanitizeWhereQuery.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { sanitizeInternalFields } from '../../utilities/sanitizeInternalFields.js'\nimport { sanitizeSelect } from '../../utilities/sanitizeSelect.js'\nimport { buildVersionCollectionFields } from '../../versions/buildCollectionFields.js'\nimport { getQueryDraftsSelect } from '../../versions/drafts/getQueryDraftsSelect.js'\n\nexport type Arguments = {\n  collection: Collection\n  depth?: number\n  limit?: number\n  overrideAccess?: boolean\n  page?: number\n  pagination?: boolean\n  populate?: PopulateType\n  req?: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n  sort?: Sort\n  where?: Where\n}\n\nexport const findVersionsOperation = async <TData extends TypeWithVersion<TData>>(\n  args: Arguments,\n): Promise<PaginatedDocs<TData>> => {\n  const {\n    collection: { config: collectionConfig },\n    depth,\n    limit,\n    overrideAccess,\n    page,\n    pagination = true,\n    populate,\n    select: incomingSelect,\n    showHiddenFields,\n    sort,\n    where,\n  } = args\n\n  const req = args.req!\n  const { fallbackLocale, locale, payload } = req\n\n  try {\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    let accessResults!: AccessResult\n\n    if (!overrideAccess) {\n      accessResults = await executeAccess({ req }, collectionConfig.access.readVersions)\n    }\n\n    const versionFields = buildVersionCollectionFields(payload.config, collectionConfig, true)\n\n    await validateQueryPaths({\n      collectionConfig,\n      overrideAccess: overrideAccess!,\n      req,\n      versionFields,\n      where: where!,\n    })\n\n    const fullWhere = combineQueries(where!, accessResults)\n    sanitizeWhereQuery({ fields: versionFields, payload, where: fullWhere })\n\n    const select = sanitizeSelect({\n      fields: versionFields,\n      forceSelect: getQueryDraftsSelect({ select: collectionConfig.forceSelect }),\n      select: incomingSelect,\n      versions: true,\n    })\n\n    // /////////////////////////////////////\n    // Find\n    // /////////////////////////////////////\n\n    const paginatedDocs = await payload.db.findVersions<TData>({\n      collection: collectionConfig.slug,\n      limit: limit ?? 10,\n      locale: locale!,\n      page: page || 1,\n      pagination,\n      req,\n      select,\n      sort,\n      where: fullWhere,\n    })\n\n    // /////////////////////////////////////\n    // beforeRead - Collection\n    // /////////////////////////////////////\n    const result: PaginatedDocs<TData> = paginatedDocs as unknown as PaginatedDocs<TData>\n    result.docs = (await Promise.all(\n      paginatedDocs.docs.map(async (doc) => {\n        const docRef = doc\n        // Fallback if not selected\n        if (!docRef.version) {\n          ;(docRef as any).version = {}\n        }\n\n        if (collectionConfig.hooks?.beforeRead?.length) {\n          for (const hook of collectionConfig.hooks.beforeRead) {\n            docRef.version =\n              (await hook({\n                collection: collectionConfig,\n                context: req.context,\n                doc: docRef.version,\n                query: fullWhere,\n                req,\n              })) || docRef.version\n          }\n        }\n\n        return docRef\n      }),\n    )) as TData[]\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result.docs = await Promise.all(\n      result.docs.map(async (data) => {\n        data.version = await afterRead({\n          collection: collectionConfig,\n          context: req.context,\n          depth: depth!,\n          doc: data.version,\n          // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n          draft: undefined,\n          fallbackLocale: fallbackLocale!,\n          findMany: true,\n          global: null,\n          locale: locale!,\n          overrideAccess: overrideAccess!,\n          populate,\n          req,\n          select: typeof select?.version === 'object' ? select.version : undefined,\n          showHiddenFields: showHiddenFields!,\n        })\n        return data\n      }),\n    )\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks.afterRead?.length) {\n      result.docs = await Promise.all(\n        result.docs.map(async (doc) => {\n          const docRef = doc\n\n          for (const hook of collectionConfig.hooks.afterRead) {\n            docRef.version =\n              (await hook({\n                collection: collectionConfig,\n                context: req.context,\n                doc: doc.version,\n                findMany: true,\n                query: fullWhere,\n                req,\n              })) || doc.version\n          }\n\n          return docRef\n        }),\n      )\n    }\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n    result.docs = result.docs.map((doc) => sanitizeInternalFields<TData>(doc))\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","validateQueryPaths","sanitizeWhereQuery","afterRead","killTransaction","sanitizeInternalFields","sanitizeSelect","buildVersionCollectionFields","getQueryDraftsSelect","findVersionsOperation","args","collection","config","collectionConfig","depth","limit","overrideAccess","page","pagination","populate","select","incomingSelect","showHiddenFields","sort","where","req","fallbackLocale","locale","payload","accessResults","access","readVersions","versionFields","fullWhere","fields","forceSelect","versions","paginatedDocs","db","findVersions","slug","result","docs","Promise","all","map","doc","docRef","version","hooks","beforeRead","length","hook","context","query","data","draft","undefined","findMany","global","error"],"mappings":"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"}