{"version":3,"sources":["../../../src/collections/operations/find.ts"],"sourcesContent":["import type { AccessResult } from '../../config/types.js'\nimport type { PaginatedDocs } from '../../database/types.js'\nimport type { CollectionSlug, JoinQuery } from '../../index.js'\nimport type {\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  Sort,\n  TransformCollectionWithSelect,\n  Where,\n} from '../../types/index.js'\nimport type {\n  Collection,\n  DataFromCollectionSlug,\n  SelectFromCollectionSlug,\n} from '../config/types.js'\n\nimport { executeAccess } from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport { sanitizeJoinQuery } from '../../database/sanitizeJoinQuery.js'\nimport { sanitizeWhereQuery } from '../../database/sanitizeWhereQuery.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { lockedDocumentsCollectionSlug } from '../../locked-documents/config.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { sanitizeSelect } from '../../utilities/sanitizeSelect.js'\nimport { buildVersionCollectionFields } from '../../versions/buildCollectionFields.js'\nimport { appendVersionToQueryKey } from '../../versions/drafts/appendVersionToQueryKey.js'\nimport { getQueryDraftsSelect } from '../../versions/drafts/getQueryDraftsSelect.js'\nimport { getQueryDraftsSort } from '../../versions/drafts/getQueryDraftsSort.js'\nimport { sanitizeSortQuery } from './utilities/sanitizeSortQuery.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments = {\n  collection: Collection\n  currentDepth?: number\n  depth?: number\n  disableErrors?: boolean\n  draft?: boolean\n  includeLockStatus?: boolean\n  joins?: JoinQuery\n  limit?: number\n  overrideAccess?: boolean\n  page?: number\n  pagination?: boolean\n  populate?: PopulateType\n  req?: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n  sort?: Sort\n  where?: Where\n}\n\nconst lockDurationDefault = 300 // Default 5 minutes in seconds\n\nexport const findOperation = async <\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  incomingArgs: Arguments,\n): Promise<PaginatedDocs<TransformCollectionWithSelect<TSlug, TSelect>>> => {\n  let args = incomingArgs\n\n  try {\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    if (args.collection.config.hooks?.beforeOperation?.length) {\n      for (const hook of args.collection.config.hooks.beforeOperation) {\n        args =\n          (await hook({\n            args,\n            collection: args.collection.config,\n            context: args.req!.context,\n            operation: 'read',\n            req: args.req!,\n          })) || args\n      }\n    }\n\n    const {\n      collection: { config: collectionConfig },\n      collection,\n      currentDepth,\n      depth,\n      disableErrors,\n      draft: draftsEnabled,\n      includeLockStatus,\n      joins,\n      limit,\n      overrideAccess,\n      page,\n      pagination = true,\n      populate,\n      select: incomingSelect,\n      showHiddenFields,\n      sort: incomingSort,\n      where,\n    } = args\n\n    const req = args.req!\n    const { fallbackLocale, locale, payload } = req\n\n    const select = sanitizeSelect({\n      fields: collectionConfig.flattenedFields,\n      forceSelect: collectionConfig.forceSelect,\n      select: incomingSelect,\n    })\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    let accessResult: AccessResult\n\n    if (!overrideAccess) {\n      accessResult = await executeAccess({ disableErrors, req }, collectionConfig.access.read)\n\n      // If errors are disabled, and access returns false, return empty results\n      if (accessResult === false) {\n        return {\n          docs: [],\n          hasNextPage: false,\n          hasPrevPage: false,\n          limit: limit!,\n          nextPage: null,\n          page: 1,\n          pagingCounter: 1,\n          prevPage: null,\n          totalDocs: 0,\n          totalPages: 1,\n        }\n      }\n    }\n\n    // /////////////////////////////////////\n    // Find\n    // /////////////////////////////////////\n\n    const usePagination = pagination && limit !== 0\n    const sanitizedLimit = limit ?? (usePagination ? 10 : 0)\n    const sanitizedPage = page || 1\n\n    let result: PaginatedDocs<DataFromCollectionSlug<TSlug>>\n\n    let fullWhere = combineQueries(where!, accessResult!)\n    sanitizeWhereQuery({ fields: collectionConfig.flattenedFields, payload, where: fullWhere })\n\n    const sort = sanitizeSortQuery({\n      fields: collection.config.flattenedFields,\n      sort: incomingSort,\n    })\n\n    const sanitizedJoins = await sanitizeJoinQuery({\n      collectionConfig,\n      joins,\n      overrideAccess: overrideAccess!,\n      req,\n    })\n\n    if (collectionConfig.versions?.drafts && draftsEnabled) {\n      fullWhere = appendVersionToQueryKey(fullWhere)\n\n      await validateQueryPaths({\n        collectionConfig: collection.config,\n        overrideAccess: overrideAccess!,\n        req,\n        versionFields: buildVersionCollectionFields(payload.config, collection.config, true),\n        where: appendVersionToQueryKey(where),\n      })\n\n      result = await payload.db.queryDrafts<DataFromCollectionSlug<TSlug>>({\n        collection: collectionConfig.slug,\n        joins: req.payloadAPI === 'GraphQL' ? false : sanitizedJoins,\n        limit: sanitizedLimit,\n        locale: locale!,\n        page: sanitizedPage,\n        pagination: usePagination,\n        req,\n        select: getQueryDraftsSelect({ select }),\n        sort: getQueryDraftsSort({\n          collectionConfig,\n          sort,\n        }),\n        where: fullWhere,\n      })\n    } else {\n      await validateQueryPaths({\n        collectionConfig,\n        overrideAccess: overrideAccess!,\n        req,\n        where: where!,\n      })\n\n      result = await payload.db.find<DataFromCollectionSlug<TSlug>>({\n        collection: collectionConfig.slug,\n        draftsEnabled,\n        joins: req.payloadAPI === 'GraphQL' ? false : sanitizedJoins,\n        limit: sanitizedLimit,\n        locale: locale!,\n        page: sanitizedPage,\n        pagination,\n        req,\n        select,\n        sort,\n        where: fullWhere,\n      })\n    }\n\n    if (includeLockStatus) {\n      try {\n        const lockDocumentsProp = collectionConfig?.lockDocuments\n\n        const lockDuration =\n          typeof lockDocumentsProp === 'object' ? lockDocumentsProp.duration : lockDurationDefault\n        const lockDurationInMilliseconds = lockDuration * 1000\n\n        const now = new Date().getTime()\n\n        const lockedDocuments = await payload.find({\n          collection: lockedDocumentsCollectionSlug,\n          depth: 1,\n          limit: sanitizedLimit,\n          overrideAccess: false,\n          pagination: false,\n          req,\n          where: {\n            and: [\n              {\n                'document.relationTo': {\n                  equals: collectionConfig.slug,\n                },\n              },\n              {\n                'document.value': {\n                  in: result.docs.map((doc) => doc.id),\n                },\n              },\n              // Query where the lock is newer than the current time minus lock time\n              {\n                updatedAt: {\n                  greater_than: new Date(now - lockDurationInMilliseconds),\n                },\n              },\n            ],\n          },\n        })\n\n        const lockedDocs = Array.isArray(lockedDocuments?.docs) ? lockedDocuments.docs : []\n\n        // Filter out stale locks\n        const validLockedDocs = lockedDocs.filter((lock) => {\n          const lastEditedAt = new Date(lock?.updatedAt).getTime()\n          return lastEditedAt + lockDurationInMilliseconds > now\n        })\n\n        for (const doc of result.docs) {\n          const lockedDoc = validLockedDocs.find((lock) => lock?.document?.value === doc.id)\n          doc._isLocked = !!lockedDoc\n          doc._userEditing = lockedDoc ? lockedDoc?.user?.value : null\n        }\n      } catch (_err) {\n        for (const doc of result.docs) {\n          doc._isLocked = false\n          doc._userEditing = null\n        }\n      }\n    }\n\n    // /////////////////////////////////////\n    // beforeRead - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig?.hooks?.beforeRead?.length) {\n      result.docs = await Promise.all(\n        result.docs.map(async (doc) => {\n          let docRef = doc\n\n          for (const hook of collectionConfig.hooks.beforeRead) {\n            docRef =\n              (await hook({\n                collection: collectionConfig,\n                context: req.context,\n                doc: docRef,\n                query: fullWhere,\n                req,\n              })) || docRef\n          }\n\n          return docRef\n        }),\n      )\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result.docs = await Promise.all(\n      result.docs.map(async (doc) =>\n        afterRead<DataFromCollectionSlug<TSlug>>({\n          collection: collectionConfig,\n          context: req.context,\n          currentDepth,\n          depth: depth!,\n          doc,\n          draft: draftsEnabled!,\n          fallbackLocale: fallbackLocale!,\n          findMany: true,\n          global: null,\n          locale: locale!,\n          overrideAccess: overrideAccess!,\n          populate,\n          req,\n          select,\n          showHiddenFields: showHiddenFields!,\n        }),\n      ),\n    )\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig?.hooks?.afterRead?.length) {\n      result.docs = await Promise.all(\n        result.docs.map(async (doc) => {\n          let docRef = doc\n\n          for (const hook of collectionConfig.hooks.afterRead) {\n            docRef =\n              (await hook({\n                collection: collectionConfig,\n                context: req.context,\n                doc: docRef,\n                findMany: true,\n                query: fullWhere,\n                req,\n              })) || doc\n          }\n\n          return docRef\n        }),\n      )\n    }\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'find',\n      result,\n    })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    return result as PaginatedDocs<TransformCollectionWithSelect<TSlug, TSelect>>\n  } catch (error: unknown) {\n    await killTransaction(args.req!)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","validateQueryPaths","sanitizeJoinQuery","sanitizeWhereQuery","afterRead","lockedDocumentsCollectionSlug","killTransaction","sanitizeSelect","buildVersionCollectionFields","appendVersionToQueryKey","getQueryDraftsSelect","getQueryDraftsSort","sanitizeSortQuery","buildAfterOperation","lockDurationDefault","findOperation","incomingArgs","args","collection","config","hooks","beforeOperation","length","hook","context","req","operation","collectionConfig","currentDepth","depth","disableErrors","draft","draftsEnabled","includeLockStatus","joins","limit","overrideAccess","page","pagination","populate","select","incomingSelect","showHiddenFields","sort","incomingSort","where","fallbackLocale","locale","payload","fields","flattenedFields","forceSelect","accessResult","access","read","docs","hasNextPage","hasPrevPage","nextPage","pagingCounter","prevPage","totalDocs","totalPages","usePagination","sanitizedLimit","sanitizedPage","result","fullWhere","sanitizedJoins","versions","drafts","versionFields","db","queryDrafts","slug","payloadAPI","find","lockDocumentsProp","lockDocuments","lockDuration","duration","lockDurationInMilliseconds","now","Date","getTime","lockedDocuments","and","equals","in","map","doc","id","updatedAt","greater_than","lockedDocs","Array","isArray","validLockedDocs","filter","lock","lastEditedAt","lockedDoc","document","value","_isLocked","_userEditing","user","_err","beforeRead","Promise","all","docRef","query","findMany","global","error"],"mappings":"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"}