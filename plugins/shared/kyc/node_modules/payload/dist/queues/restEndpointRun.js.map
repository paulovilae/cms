{"version":3,"sources":["../../src/queues/restEndpointRun.ts"],"sourcesContent":["import type { Endpoint, SanitizedConfig } from '../config/types.js'\n\nimport { runJobs, type RunJobsArgs } from './operations/runJobs/index.js'\n\nconst configHasJobs = (config: SanitizedConfig): boolean => {\n  return Boolean(config.jobs?.tasks?.length || config.jobs?.workflows?.length)\n}\n\n/**\n * /api/payload-jobs/run endpoint\n */\nexport const runJobsEndpoint: Endpoint = {\n  handler: async (req) => {\n    if (!configHasJobs(req.payload.config)) {\n      return Response.json(\n        {\n          message: 'No jobs to run.',\n        },\n        { status: 200 },\n      )\n    }\n\n    const accessFn = req.payload.config.jobs?.access?.run ?? (() => true)\n\n    const hasAccess = await accessFn({ req })\n\n    if (!hasAccess) {\n      return Response.json(\n        {\n          message: req.i18n.t('error:unauthorized'),\n        },\n        { status: 401 },\n      )\n    }\n\n    const { allQueues, limit, queue } = req.query as {\n      allQueues?: boolean\n      limit?: number\n      queue?: string\n    }\n\n    const runJobsArgs: RunJobsArgs = {\n      queue,\n      req,\n      // We are checking access above, so we can override it here\n      overrideAccess: true,\n    }\n\n    if (typeof limit !== 'undefined') {\n      runJobsArgs.limit = Number(limit)\n    }\n\n    if (allQueues && !(typeof allQueues === 'string' && allQueues === 'false')) {\n      runJobsArgs.allQueues = true\n    }\n\n    let noJobsRemaining = false\n    let remainingJobsFromQueried = 0\n    try {\n      const result = await runJobs(runJobsArgs)\n      noJobsRemaining = !!result.noJobsRemaining\n      remainingJobsFromQueried = result.remainingJobsFromQueried\n    } catch (err) {\n      req.payload.logger.error({\n        err,\n        msg: 'There was an error running jobs:',\n        queue: runJobsArgs.queue,\n      })\n\n      return Response.json(\n        {\n          message: req.i18n.t('error:unknown'),\n          noJobsRemaining: true,\n          remainingJobsFromQueried,\n        },\n        { status: 500 },\n      )\n    }\n\n    return Response.json(\n      {\n        message: req.i18n.t('general:success'),\n        noJobsRemaining,\n        remainingJobsFromQueried,\n      },\n      { status: 200 },\n    )\n  },\n  method: 'get',\n  path: '/run',\n}\n"],"names":["runJobs","configHasJobs","config","Boolean","jobs","tasks","length","workflows","runJobsEndpoint","handler","req","payload","Response","json","message","status","accessFn","access","run","hasAccess","i18n","t","allQueues","limit","queue","query","runJobsArgs","overrideAccess","Number","noJobsRemaining","remainingJobsFromQueried","result","err","logger","error","msg","method","path"],"mappings":"AAEA,SAASA,OAAO,QAA0B,gCAA+B;AAEzE,MAAMC,gBAAgB,CAACC;IACrB,OAAOC,QAAQD,OAAOE,IAAI,EAAEC,OAAOC,UAAUJ,OAAOE,IAAI,EAAEG,WAAWD;AACvE;AAEA;;CAEC,GACD,OAAO,MAAME,kBAA4B;IACvCC,SAAS,OAAOC;QACd,IAAI,CAACT,cAAcS,IAAIC,OAAO,CAACT,MAAM,GAAG;YACtC,OAAOU,SAASC,IAAI,CAClB;gBACEC,SAAS;YACX,GACA;gBAAEC,QAAQ;YAAI;QAElB;QAEA,MAAMC,WAAWN,IAAIC,OAAO,CAACT,MAAM,CAACE,IAAI,EAAEa,QAAQC,OAAQ,CAAA,IAAM,IAAG;QAEnE,MAAMC,YAAY,MAAMH,SAAS;YAAEN;QAAI;QAEvC,IAAI,CAACS,WAAW;YACd,OAAOP,SAASC,IAAI,CAClB;gBACEC,SAASJ,IAAIU,IAAI,CAACC,CAAC,CAAC;YACtB,GACA;gBAAEN,QAAQ;YAAI;QAElB;QAEA,MAAM,EAAEO,SAAS,EAAEC,KAAK,EAAEC,KAAK,EAAE,GAAGd,IAAIe,KAAK;QAM7C,MAAMC,cAA2B;YAC/BF;YACAd;YACA,2DAA2D;YAC3DiB,gBAAgB;QAClB;QAEA,IAAI,OAAOJ,UAAU,aAAa;YAChCG,YAAYH,KAAK,GAAGK,OAAOL;QAC7B;QAEA,IAAID,aAAa,CAAE,CAAA,OAAOA,cAAc,YAAYA,cAAc,OAAM,GAAI;YAC1EI,YAAYJ,SAAS,GAAG;QAC1B;QAEA,IAAIO,kBAAkB;QACtB,IAAIC,2BAA2B;QAC/B,IAAI;YACF,MAAMC,SAAS,MAAM/B,QAAQ0B;YAC7BG,kBAAkB,CAAC,CAACE,OAAOF,eAAe;YAC1CC,2BAA2BC,OAAOD,wBAAwB;QAC5D,EAAE,OAAOE,KAAK;YACZtB,IAAIC,OAAO,CAACsB,MAAM,CAACC,KAAK,CAAC;gBACvBF;gBACAG,KAAK;gBACLX,OAAOE,YAAYF,KAAK;YAC1B;YAEA,OAAOZ,SAASC,IAAI,CAClB;gBACEC,SAASJ,IAAIU,IAAI,CAACC,CAAC,CAAC;gBACpBQ,iBAAiB;gBACjBC;YACF,GACA;gBAAEf,QAAQ;YAAI;QAElB;QAEA,OAAOH,SAASC,IAAI,CAClB;YACEC,SAASJ,IAAIU,IAAI,CAACC,CAAC,CAAC;YACpBQ;YACAC;QACF,GACA;YAAEf,QAAQ;QAAI;IAElB;IACAqB,QAAQ;IACRC,MAAM;AACR,EAAC"}