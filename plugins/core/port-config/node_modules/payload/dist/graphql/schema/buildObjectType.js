/* eslint-disable @typescript-eslint/no-use-before-define */ /* eslint-disable no-await-in-loop */ /* eslint-disable no-restricted-syntax */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _graphql = require("graphql");
const _graphqlscalars = require("graphql-scalars");
const _graphqltypejson = require("graphql-type-json");
const _types = require("../../fields/config/types");
const _formatLabels = require("../../utilities/formatLabels");
const _combineParentName = /*#__PURE__*/ _interop_require_default(require("../utilities/combineParentName"));
const _formatName = /*#__PURE__*/ _interop_require_default(require("../utilities/formatName"));
const _formatOptions = /*#__PURE__*/ _interop_require_default(require("../utilities/formatOptions"));
const _buildWhereInputType = /*#__PURE__*/ _interop_require_default(require("./buildWhereInputType"));
const _isFieldNullable = /*#__PURE__*/ _interop_require_default(require("./isFieldNullable"));
const _withNullableType = /*#__PURE__*/ _interop_require_default(require("./withNullableType"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function buildObjectType({ name, baseFields = {}, fields, forceNullable, parentName, payload }) {
    const fieldToSchemaMap = {
        array: (objectTypeConfig, field)=>{
            const interfaceName = field?.interfaceName || (0, _combineParentName.default)(parentName, (0, _formatLabels.toWords)(field.name, true));
            if (!payload.types.arrayTypes[interfaceName]) {
                const objectType = buildObjectType({
                    name: interfaceName,
                    fields: field.fields,
                    forceNullable: (0, _isFieldNullable.default)(field, forceNullable),
                    parentName: interfaceName,
                    payload
                });
                if (Object.keys(objectType.getFields()).length) {
                    payload.types.arrayTypes[interfaceName] = objectType;
                }
            }
            if (!payload.types.arrayTypes[interfaceName]) {
                return objectTypeConfig;
            }
            const arrayType = new _graphql.GraphQLList(new _graphql.GraphQLNonNull(payload.types.arrayTypes[interfaceName]));
            return {
                ...objectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, arrayType)
                }
            };
        },
        blocks: (objectTypeConfig, field)=>{
            const blockTypes = field.blocks.reduce((acc, block)=>{
                if (!payload.types.blockTypes[block.slug]) {
                    const interfaceName = block?.interfaceName || block?.graphQL?.singularName || (0, _formatLabels.toWords)(block.slug, true);
                    const objectType = buildObjectType({
                        name: interfaceName,
                        fields: [
                            ...block.fields,
                            {
                                name: 'blockType',
                                type: 'text'
                            }
                        ],
                        forceNullable,
                        parentName: interfaceName,
                        payload
                    });
                    if (Object.keys(objectType.getFields()).length) {
                        payload.types.blockTypes[block.slug] = objectType;
                    }
                }
                if (payload.types.blockTypes[block.slug]) {
                    acc.push(payload.types.blockTypes[block.slug]);
                }
                return acc;
            }, []);
            if (blockTypes.length === 0) {
                return objectTypeConfig;
            }
            const fullName = (0, _combineParentName.default)(parentName, (0, _formatLabels.toWords)(field.name, true));
            const type = new _graphql.GraphQLList(new _graphql.GraphQLNonNull(new _graphql.GraphQLUnionType({
                name: fullName,
                resolveType: (data)=>payload.types.blockTypes[data.blockType].name,
                types: blockTypes
            })));
            return {
                ...objectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, type)
                }
            };
        },
        checkbox: (objectTypeConfig, field)=>({
                ...objectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphql.GraphQLBoolean, forceNullable)
                }
            }),
        code: (objectTypeConfig, field)=>({
                ...objectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphql.GraphQLString, forceNullable)
                }
            }),
        collapsible: (objectTypeConfig, field)=>field.fields.reduce((objectTypeConfigWithCollapsibleFields, subField)=>{
                const addSubField = fieldToSchemaMap[subField.type];
                if (addSubField) return addSubField(objectTypeConfigWithCollapsibleFields, subField);
                return objectTypeConfigWithCollapsibleFields;
            }, objectTypeConfig),
        date: (objectTypeConfig, field)=>({
                ...objectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphqlscalars.DateTimeResolver, forceNullable)
                }
            }),
        email: (objectTypeConfig, field)=>({
                ...objectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphqlscalars.EmailAddressResolver, forceNullable)
                }
            }),
        group: (objectTypeConfig, field)=>{
            const interfaceName = field?.interfaceName || (0, _combineParentName.default)(parentName, (0, _formatLabels.toWords)(field.name, true));
            if (!payload.types.groupTypes[interfaceName]) {
                const objectType = buildObjectType({
                    name: interfaceName,
                    fields: field.fields,
                    forceNullable: (0, _isFieldNullable.default)(field, forceNullable),
                    parentName: interfaceName,
                    payload
                });
                if (Object.keys(objectType.getFields()).length) {
                    payload.types.groupTypes[interfaceName] = objectType;
                }
            }
            if (!payload.types.groupTypes[interfaceName]) {
                return objectTypeConfig;
            }
            return {
                ...objectTypeConfig,
                [field.name]: {
                    type: payload.types.groupTypes[interfaceName]
                }
            };
        },
        json: (objectTypeConfig, field)=>({
                ...objectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphqltypejson.GraphQLJSON, forceNullable)
                }
            }),
        number: (objectTypeConfig, field)=>{
            const type = field?.name === 'id' ? _graphql.GraphQLInt : _graphql.GraphQLFloat;
            return {
                ...objectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, field?.hasMany === true ? new _graphql.GraphQLList(type) : type, forceNullable)
                }
            };
        },
        point: (objectTypeConfig, field)=>({
                ...objectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, new _graphql.GraphQLList(new _graphql.GraphQLNonNull(_graphql.GraphQLFloat)), forceNullable)
                }
            }),
        radio: (objectTypeConfig, field)=>({
                ...objectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, new _graphql.GraphQLEnumType({
                        name: (0, _combineParentName.default)(parentName, field.name),
                        values: (0, _formatOptions.default)(field)
                    }), forceNullable)
                }
            }),
        relationship: (objectTypeConfig, field)=>{
            const { relationTo } = field;
            const isRelatedToManyCollections = Array.isArray(relationTo);
            const hasManyValues = field.hasMany;
            const relationshipName = (0, _combineParentName.default)(parentName, (0, _formatLabels.toWords)(field.name, true));
            let type;
            let relationToType = null;
            if (Array.isArray(relationTo)) {
                relationToType = new _graphql.GraphQLEnumType({
                    name: `${relationshipName}_RelationTo`,
                    values: relationTo.reduce((relations, relation)=>({
                            ...relations,
                            [(0, _formatName.default)(relation)]: {
                                value: relation
                            }
                        }), {})
                });
                const types = relationTo.map((relation)=>payload.collections[relation].graphQL.type);
                type = new _graphql.GraphQLObjectType({
                    name: `${relationshipName}_Relationship`,
                    fields: {
                        relationTo: {
                            type: relationToType
                        },
                        value: {
                            type: new _graphql.GraphQLUnionType({
                                name: relationshipName,
                                async resolveType (data, { req }) {
                                    return payload.collections[data.collection].graphQL.type.name;
                                },
                                types
                            })
                        }
                    }
                });
            } else {
                ({ type } = payload.collections[relationTo].graphQL);
            }
            // If the relationshipType is undefined at this point,
            // it can be assumed that this blockType can have a relationship
            // to itself. Therefore, we set the relationshipType equal to the blockType
            // that is currently being created.
            type = type || newlyCreatedBlockType;
            const relationshipArgs = {};
            const relationsUseDrafts = (Array.isArray(relationTo) ? relationTo : [
                relationTo
            ]).some((relation)=>payload.collections[relation].config.versions?.drafts);
            if (relationsUseDrafts) {
                relationshipArgs.draft = {
                    type: _graphql.GraphQLBoolean
                };
            }
            if (payload.config.localization) {
                relationshipArgs.locale = {
                    type: payload.types.localeInputType
                };
                relationshipArgs.fallbackLocale = {
                    type: payload.types.fallbackLocaleInputType
                };
            }
            const relationship = {
                type: (0, _withNullableType.default)(field, hasManyValues ? new _graphql.GraphQLList(new _graphql.GraphQLNonNull(type)) : type, forceNullable),
                args: relationshipArgs,
                extensions: {
                    complexity: 10
                },
                async resolve (parent, args, context) {
                    const value = parent[field.name];
                    const locale = args.locale || context.req.locale;
                    const fallbackLocale = args.fallbackLocale || context.req.fallbackLocale;
                    let relatedCollectionSlug = field.relationTo;
                    const draft = args.draft ?? context.req.query?.draft;
                    if (hasManyValues) {
                        const results = [];
                        const resultPromises = [];
                        const createPopulationPromise = async (relatedDoc, i)=>{
                            let id = relatedDoc;
                            let collectionSlug = field.relationTo;
                            if (isRelatedToManyCollections) {
                                collectionSlug = relatedDoc.relationTo;
                                id = relatedDoc.value;
                            }
                            const result = await context.req.payloadDataLoader.load(JSON.stringify([
                                context.req.transactionID,
                                collectionSlug,
                                id,
                                0,
                                0,
                                locale,
                                fallbackLocale,
                                false,
                                false,
                                draft
                            ]));
                            if (result) {
                                if (isRelatedToManyCollections) {
                                    results[i] = {
                                        relationTo: collectionSlug,
                                        value: {
                                            ...result,
                                            collection: collectionSlug
                                        }
                                    };
                                } else {
                                    results[i] = result;
                                }
                            }
                        };
                        if (value) {
                            value.forEach((relatedDoc, i)=>{
                                resultPromises.push(createPopulationPromise(relatedDoc, i));
                            });
                        }
                        await Promise.all(resultPromises);
                        return results.filter((doc)=>doc != null);
                    }
                    let id = value;
                    if (isRelatedToManyCollections && value) {
                        id = value.value;
                        relatedCollectionSlug = value.relationTo;
                    }
                    if (id) {
                        const relatedDocument = await context.req.payloadDataLoader.load(JSON.stringify([
                            context.req.transactionID,
                            relatedCollectionSlug,
                            id,
                            0,
                            0,
                            locale,
                            fallbackLocale,
                            false,
                            false,
                            draft
                        ]));
                        if (relatedDocument) {
                            if (isRelatedToManyCollections) {
                                return {
                                    relationTo: relatedCollectionSlug,
                                    value: {
                                        ...relatedDocument,
                                        collection: relatedCollectionSlug
                                    }
                                };
                            }
                            return relatedDocument;
                        }
                        return null;
                    }
                    return null;
                }
            };
            return {
                ...objectTypeConfig,
                [field.name]: relationship
            };
        },
        richText: (objectTypeConfig, field)=>({
                ...objectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphqltypejson.GraphQLJSON, forceNullable),
                    args: {
                        depth: {
                            type: _graphql.GraphQLInt
                        }
                    },
                    async resolve (parent, args, context) {
                        let depth = payload.config.defaultDepth;
                        if (typeof args.depth !== 'undefined') depth = args.depth;
                        const editor = field?.editor;
                        // RichText fields have their own depth argument in GraphQL.
                        // This is why the populationPromise (which populates richtext fields like uploads and relationships)
                        // is run here again, with the provided depth.
                        // In the graphql find.ts resolver, the depth is then hard-coded to 0.
                        // Effectively, this means that the populationPromise for GraphQL is only run here, and not in the find.ts resolver / normal population promise.
                        if (editor?.populationPromise) {
                            const populateDepth = field?.maxDepth !== undefined && field?.maxDepth < depth ? field?.maxDepth : depth;
                            await editor?.populationPromise({
                                context,
                                depth: populateDepth,
                                draft: args.draft,
                                field,
                                findMany: false,
                                flattenLocales: false,
                                overrideAccess: false,
                                populationPromises: [],
                                req: context.req,
                                showHiddenFields: false,
                                siblingDoc: parent
                            });
                        }
                        return parent[field.name];
                    }
                }
            }),
        row: (objectTypeConfig, field)=>field.fields.reduce((objectTypeConfigWithRowFields, subField)=>{
                const addSubField = fieldToSchemaMap[subField.type];
                if (addSubField) return addSubField(objectTypeConfigWithRowFields, subField);
                return objectTypeConfigWithRowFields;
            }, objectTypeConfig),
        select: (objectTypeConfig, field)=>{
            const fullName = (0, _combineParentName.default)(parentName, field.name);
            let type = new _graphql.GraphQLEnumType({
                name: fullName,
                values: (0, _formatOptions.default)(field)
            });
            type = field.hasMany ? new _graphql.GraphQLList(new _graphql.GraphQLNonNull(type)) : type;
            type = (0, _withNullableType.default)(field, type, forceNullable);
            return {
                ...objectTypeConfig,
                [field.name]: {
                    type
                }
            };
        },
        tabs: (objectTypeConfig, field)=>field.tabs.reduce((tabSchema, tab)=>{
                if ((0, _types.tabHasName)(tab)) {
                    const interfaceName = tab?.interfaceName || (0, _combineParentName.default)(parentName, (0, _formatLabels.toWords)(tab.name, true));
                    if (!payload.types.groupTypes[interfaceName]) {
                        const objectType = buildObjectType({
                            name: interfaceName,
                            fields: tab.fields,
                            forceNullable,
                            parentName: interfaceName,
                            payload
                        });
                        if (Object.keys(objectType.getFields()).length) {
                            payload.types.groupTypes[interfaceName] = objectType;
                        }
                    }
                    if (!payload.types.groupTypes[interfaceName]) {
                        return tabSchema;
                    }
                    return {
                        ...tabSchema,
                        [tab.name]: {
                            type: payload.types.groupTypes[interfaceName]
                        }
                    };
                }
                return {
                    ...tabSchema,
                    ...tab.fields.reduce((subFieldSchema, subField)=>{
                        const addSubField = fieldToSchemaMap[subField.type];
                        if (addSubField) return addSubField(subFieldSchema, subField);
                        return subFieldSchema;
                    }, tabSchema)
                };
            }, objectTypeConfig),
        text: (objectTypeConfig, field)=>({
                ...objectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, field.hasMany === true ? new _graphql.GraphQLList(_graphql.GraphQLString) : _graphql.GraphQLString, forceNullable)
                }
            }),
        textarea: (objectTypeConfig, field)=>({
                ...objectTypeConfig,
                [field.name]: {
                    type: (0, _withNullableType.default)(field, _graphql.GraphQLString, forceNullable)
                }
            }),
        upload: (objectTypeConfig, field)=>{
            const { relationTo } = field;
            const uploadName = (0, _combineParentName.default)(parentName, (0, _formatLabels.toWords)(field.name, true));
            // If the relationshipType is undefined at this point,
            // it can be assumed that this blockType can have a relationship
            // to itself. Therefore, we set the relationshipType equal to the blockType
            // that is currently being created.
            const type = (0, _withNullableType.default)(field, payload.collections[relationTo].graphQL.type || newlyCreatedBlockType, forceNullable);
            const uploadArgs = {};
            if (payload.config.localization) {
                uploadArgs.locale = {
                    type: payload.types.localeInputType
                };
                uploadArgs.fallbackLocale = {
                    type: payload.types.fallbackLocaleInputType
                };
            }
            const relatedCollectionSlug = field.relationTo;
            const upload = {
                type,
                args: uploadArgs,
                extensions: {
                    complexity: 20
                },
                async resolve (parent, args, context) {
                    const value = parent[field.name];
                    const locale = args.locale || context.req.locale;
                    const fallbackLocale = args.fallbackLocale || context.req.fallbackLocale;
                    const id = value;
                    const draft = args.draft ?? context.req.query?.draft;
                    if (id) {
                        const relatedDocument = await context.req.payloadDataLoader.load(JSON.stringify([
                            context.req.transactionID,
                            relatedCollectionSlug,
                            id,
                            0,
                            0,
                            locale,
                            fallbackLocale,
                            false,
                            false,
                            Boolean(draft)
                        ]));
                        return relatedDocument || null;
                    }
                    return null;
                }
            };
            const whereFields = payload.collections[relationTo].config.fields;
            upload.args.where = {
                type: (0, _buildWhereInputType.default)({
                    name: uploadName,
                    fields: whereFields,
                    parentName: uploadName,
                    payload
                })
            };
            return {
                ...objectTypeConfig,
                [field.name]: upload
            };
        }
    };
    const objectSchema = {
        name,
        fields: ()=>fields.reduce((objectTypeConfig, field)=>{
                const fieldSchema = fieldToSchemaMap[field.type];
                if (typeof fieldSchema !== 'function') {
                    return objectTypeConfig;
                }
                return {
                    ...objectTypeConfig,
                    ...fieldSchema(objectTypeConfig, field)
                };
            }, baseFields)
    };
    const newlyCreatedBlockType = new _graphql.GraphQLObjectType(objectSchema);
    return newlyCreatedBlockType;
}
const _default = buildObjectType;

//# sourceMappingURL=data:application/json;base64,