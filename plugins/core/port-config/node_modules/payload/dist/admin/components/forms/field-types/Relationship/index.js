"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _qs = /*#__PURE__*/ _interop_require_default(require("qs"));
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _validations = require("../../../../../fields/validations");
const _wordBoundariesRegex = /*#__PURE__*/ _interop_require_default(require("../../../../../utilities/wordBoundariesRegex"));
const _useDebouncedCallback = require("../../../../hooks/useDebouncedCallback");
const _ReactSelect = /*#__PURE__*/ _interop_require_default(require("../../../elements/ReactSelect"));
const _Auth = require("../../../utilities/Auth");
const _Config = require("../../../utilities/Config");
const _GetFilterOptions = require("../../../utilities/GetFilterOptions");
const _Locale = require("../../../utilities/Locale");
const _Error = /*#__PURE__*/ _interop_require_default(require("../../Error"));
const _FieldDescription = /*#__PURE__*/ _interop_require_default(require("../../FieldDescription"));
const _context = require("../../Form/context");
const _Label = /*#__PURE__*/ _interop_require_default(require("../../Label"));
const _useField = /*#__PURE__*/ _interop_require_default(require("../../useField"));
const _withCondition = /*#__PURE__*/ _interop_require_default(require("../../withCondition"));
const _shared = require("../shared");
const _AddNew = require("./AddNew");
const _createRelationMap = require("./createRelationMap");
const _findOptionsByValue = require("./findOptionsByValue");
require("./index.scss");
const _optionsReducer = /*#__PURE__*/ _interop_require_default(require("./optionsReducer"));
const _MultiValueLabel = require("./select-components/MultiValueLabel");
const _SingleValue = require("./select-components/SingleValue");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const maxResultsPerRequest = 10;
const baseClass = 'relationship';
const Relationship = (props)=>{
    const { name, admin: { allowCreate = true, className, components: { Error, Label } = {}, condition, description, isSortable = true, readOnly, sortOptions, style, width } = {}, filterOptions, hasMany, label, path, relationTo, required, validate = _validations.relationship } = props;
    const ErrorComp = Error || _Error.default;
    const LabelComp = Label || _Label.default;
    const config = (0, _Config.useConfig)();
    const { collections, routes: { api }, serverURL } = config;
    const hasMultipleRelations = Array.isArray(relationTo);
    const initialLoadedPageState = hasMultipleRelations ? relationTo.reduce((acc, relation)=>{
        return {
            ...acc,
            [relation]: 0
        };
    }, {}) : {};
    const { i18n, t } = (0, _reacti18next.useTranslation)('fields');
    const { permissions } = (0, _Auth.useAuth)();
    const { code: locale } = (0, _Locale.useLocale)();
    const formProcessing = (0, _context.useFormProcessing)();
    const [options, dispatchOptions] = (0, _react.useReducer)(_optionsReducer.default, []);
    const [lastFullyLoadedRelation, setLastFullyLoadedRelation] = (0, _react.useState)(-1);
    const [lastLoadedPage, setLastLoadedPage] = (0, _react.useState)(initialLoadedPageState);
    const [errorLoading, setErrorLoading] = (0, _react.useState)('');
    const [filterOptionsResult, setFilterOptionsResult] = (0, _react.useState)();
    const [search, setSearch] = (0, _react.useState)('');
    const [isLoading, setIsLoading] = (0, _react.useState)(false);
    const [hasLoadedFirstPage, setHasLoadedFirstPage] = (0, _react.useState)(false);
    const [enableWordBoundarySearch, setEnableWordBoundarySearch] = (0, _react.useState)(false);
    const firstRun = (0, _react.useRef)(true);
    const pathOrName = path || name;
    const memoizedValidate = (0, _react.useCallback)((value, validationOptions)=>{
        return validate(value, {
            ...validationOptions,
            required
        });
    }, [
        validate,
        required
    ]);
    const { errorMessage, initialValue, setValue, showError, value } = (0, _useField.default)({
        condition,
        path: pathOrName,
        validate: memoizedValidate
    });
    const [drawerIsOpen, setDrawerIsOpen] = (0, _react.useState)(false);
    const getResults = (0, _react.useCallback)(async ({ lastFullyLoadedRelation: lastFullyLoadedRelationArg, onSuccess, search: searchArg, sort, value: valueArg })=>{
        if (!permissions) {
            return;
        }
        const lastFullyLoadedRelationToUse = typeof lastFullyLoadedRelationArg !== 'undefined' ? lastFullyLoadedRelationArg : -1;
        const relations = Array.isArray(relationTo) ? relationTo : [
            relationTo
        ];
        const relationsToFetch = lastFullyLoadedRelationToUse === -1 ? relations : relations.slice(lastFullyLoadedRelationToUse + 1);
        let resultsFetched = 0;
        const relationMap = (0, _createRelationMap.createRelationMap)({
            hasMany,
            relationTo,
            value: valueArg
        });
        if (!errorLoading) {
            await relationsToFetch.reduce(async (priorRelation, relation)=>{
                const relationFilterOption = filterOptionsResult?.[relation];
                let lastLoadedPageToUse;
                if (search !== searchArg) {
                    lastLoadedPageToUse = 1;
                } else {
                    lastLoadedPageToUse = lastLoadedPage[relation] + 1;
                }
                await priorRelation;
                if (relationFilterOption === false) {
                    setLastFullyLoadedRelation(relations.indexOf(relation));
                    return Promise.resolve();
                }
                if (resultsFetched < 10) {
                    const collection = collections.find((coll)=>coll.slug === relation);
                    const fieldToSearch = collection?.admin?.useAsTitle || 'id';
                    let fieldToSort = collection?.defaultSort || 'id';
                    if (typeof sortOptions === 'string') {
                        fieldToSort = sortOptions;
                    } else if (sortOptions?.[relation]) {
                        fieldToSort = sortOptions[relation];
                    }
                    const query = {
                        depth: 0,
                        draft: true,
                        limit: maxResultsPerRequest,
                        locale,
                        page: lastLoadedPageToUse,
                        sort: fieldToSort,
                        where: {
                            and: [
                                {
                                    id: {
                                        not_in: relationMap[relation]
                                    }
                                }
                            ]
                        }
                    };
                    if (searchArg) {
                        query.where.and.push({
                            [fieldToSearch]: {
                                like: searchArg
                            }
                        });
                    }
                    if (relationFilterOption && typeof relationFilterOption !== 'boolean') {
                        query.where.and.push(relationFilterOption);
                    }
                    const response = await fetch(`${serverURL}${api}/${relation}?${_qs.default.stringify(query, {
                        strictNullHandling: true
                    })}`, {
                        credentials: 'include',
                        headers: {
                            'Accept-Language': i18n.language
                        }
                    });
                    if (response.ok) {
                        const data = await response.json();
                        setLastLoadedPage((prevState)=>{
                            return {
                                ...prevState,
                                [relation]: lastLoadedPageToUse
                            };
                        });
                        if (!data.nextPage) {
                            setLastFullyLoadedRelation(relations.indexOf(relation));
                        }
                        if (data.docs.length > 0) {
                            resultsFetched += data.docs.length;
                            dispatchOptions({
                                type: 'ADD',
                                collection,
                                config,
                                docs: data.docs,
                                i18n,
                                sort
                            });
                        }
                    } else if (response.status === 403) {
                        setLastFullyLoadedRelation(relations.indexOf(relation));
                        dispatchOptions({
                            type: 'ADD',
                            collection,
                            config,
                            docs: [],
                            i18n,
                            ids: relationMap[relation],
                            sort
                        });
                    } else {
                        setErrorLoading(t('error:unspecific'));
                    }
                }
            }, Promise.resolve());
            if (typeof onSuccess === 'function') onSuccess();
        }
    }, [
        permissions,
        relationTo,
        hasMany,
        errorLoading,
        search,
        lastLoadedPage,
        collections,
        locale,
        filterOptionsResult,
        serverURL,
        sortOptions,
        api,
        i18n,
        config,
        t
    ]);
    const updateSearch = (0, _useDebouncedCallback.useDebouncedCallback)((searchArg, valueArg)=>{
        void getResults({
            search: searchArg,
            sort: true,
            value: valueArg
        });
        setSearch(searchArg);
    }, 300);
    const handleInputChange = (0, _react.useCallback)((searchArg, valueArg)=>{
        if (search !== searchArg) {
            setLastLoadedPage(initialLoadedPageState);
            updateSearch(searchArg, valueArg, searchArg !== '');
        }
    }, [
        initialLoadedPageState,
        search,
        updateSearch
    ]);
    // ///////////////////////////////////
    // Ensure we have an option for each value
    // ///////////////////////////////////
    (0, _react.useEffect)(()=>{
        const relationMap = (0, _createRelationMap.createRelationMap)({
            hasMany,
            relationTo,
            value
        });
        void Object.entries(relationMap).reduce(async (priorRelation, [relation, ids])=>{
            await priorRelation;
            const idsToLoad = ids.filter((id)=>{
                return !options.find((optionGroup)=>optionGroup?.options?.find((option)=>option.value === id && option.relationTo === relation));
            });
            if (idsToLoad.length > 0) {
                const query = {
                    depth: 0,
                    draft: true,
                    limit: idsToLoad.length,
                    locale,
                    where: {
                        id: {
                            in: idsToLoad
                        }
                    }
                };
                if (!errorLoading) {
                    const response = await fetch(`${serverURL}${api}/${relation}?${_qs.default.stringify(query, {
                        strictNullHandling: true
                    })}`, {
                        credentials: 'include',
                        headers: {
                            'Accept-Language': i18n.language
                        }
                    });
                    const collection = collections.find((coll)=>coll.slug === relation);
                    let docs = [];
                    if (response.ok) {
                        const data = await response.json();
                        docs = data.docs;
                    }
                    dispatchOptions({
                        type: 'ADD',
                        collection,
                        config,
                        docs,
                        i18n,
                        ids: idsToLoad,
                        sort: true
                    });
                }
            }
        }, Promise.resolve());
    }, [
        options,
        value,
        hasMany,
        errorLoading,
        collections,
        hasMultipleRelations,
        serverURL,
        api,
        i18n,
        relationTo,
        locale,
        config
    ]);
    // Determine if we should switch to word boundary search
    (0, _react.useEffect)(()=>{
        const relations = Array.isArray(relationTo) ? relationTo : [
            relationTo
        ];
        const isIdOnly = relations.reduce((idOnly, relation)=>{
            const collection = collections.find((coll)=>coll.slug === relation);
            const fieldToSearch = collection?.admin?.useAsTitle || 'id';
            return fieldToSearch === 'id' && idOnly;
        }, true);
        setEnableWordBoundarySearch(!isIdOnly);
    }, [
        relationTo,
        collections
    ]);
    // When (`relationTo` || `filterOptionsResult` || `locale`) changes, reset component
    // Note - effect should not run on first run
    (0, _react.useEffect)(()=>{
        if (firstRun.current) {
            firstRun.current = false;
            return;
        }
        dispatchOptions({
            type: 'CLEAR'
        });
        setLastFullyLoadedRelation(-1);
        setLastLoadedPage(initialLoadedPageState);
        setHasLoadedFirstPage(false);
    }, [
        relationTo,
        filterOptionsResult,
        locale
    ]);
    const onSave = (0, _react.useCallback)((args)=>{
        dispatchOptions({
            type: 'UPDATE',
            collection: args.collectionConfig,
            config,
            doc: args.doc,
            i18n
        });
    }, [
        i18n,
        config
    ]);
    const filterOption = (0, _react.useCallback)((item, searchFilter)=>{
        if (!searchFilter) {
            return true;
        }
        const r = (0, _wordBoundariesRegex.default)(searchFilter || '');
        // breaking the labels to search into smaller parts increases performance
        const breakApartThreshold = 250;
        let string = item.label;
        // strings less than breakApartThreshold length won't be chunked
        while(string.length > breakApartThreshold){
            // slicing by the next space after the length of the search input prevents slicing the string up by partial words
            const indexOfSpace = string.indexOf(' ', searchFilter.length);
            if (r.test(string.slice(0, indexOfSpace === -1 ? searchFilter.length : indexOfSpace + 1))) {
                return true;
            }
            string = string.slice(indexOfSpace === -1 ? searchFilter.length : indexOfSpace + 1);
        }
        return r.test(string.slice(-breakApartThreshold));
    }, []);
    const valueToRender = (0, _findOptionsByValue.findOptionsByValue)({
        options,
        value
    });
    if (!Array.isArray(valueToRender) && valueToRender?.value === 'null') valueToRender.value = null;
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            _shared.fieldBaseClass,
            baseClass,
            className,
            showError && 'error',
            errorLoading && 'error-loading',
            readOnly && `${baseClass}--read-only`
        ].filter(Boolean).join(' '),
        id: `field-${pathOrName.replace(/\./g, '__')}`,
        style: {
            ...style,
            width
        }
    }, /*#__PURE__*/ _react.default.createElement(ErrorComp, {
        message: errorMessage,
        showError: showError
    }), /*#__PURE__*/ _react.default.createElement(LabelComp, {
        htmlFor: pathOrName,
        label: label,
        required: required
    }), /*#__PURE__*/ _react.default.createElement(_GetFilterOptions.GetFilterOptions, {
        filterOptions,
        filterOptionsResult,
        path: pathOrName,
        relationTo,
        setFilterOptionsResult
    }), !errorLoading && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__wrap`
    }, /*#__PURE__*/ _react.default.createElement(_ReactSelect.default, {
        backspaceRemovesValue: !drawerIsOpen,
        components: {
            MultiValueLabel: _MultiValueLabel.MultiValueLabel,
            SingleValue: _SingleValue.SingleValue
        },
        customProps: {
            disableKeyDown: drawerIsOpen,
            disableMouseDown: drawerIsOpen,
            onSave,
            setDrawerIsOpen
        },
        disabled: readOnly || formProcessing,
        filterOption: enableWordBoundarySearch ? filterOption : undefined,
        isLoading: isLoading,
        isMulti: hasMany,
        isSortable: isSortable,
        onChange: !readOnly ? (selected)=>{
            if (selected === null) {
                setValue(hasMany ? [] : null);
            } else if (hasMany) {
                setValue(selected ? selected.map((option)=>{
                    if (hasMultipleRelations) {
                        return {
                            relationTo: option.relationTo,
                            value: option.value
                        };
                    }
                    return option.value;
                }) : null);
            } else if (hasMultipleRelations) {
                setValue({
                    relationTo: selected.relationTo,
                    value: selected.value
                });
            } else {
                setValue(selected.value);
            }
        } : undefined,
        onInputChange: (newSearch)=>handleInputChange(newSearch, value),
        onMenuOpen: ()=>{
            if (!hasLoadedFirstPage) {
                setIsLoading(true);
                void getResults({
                    onSuccess: ()=>{
                        setHasLoadedFirstPage(true);
                        setIsLoading(false);
                    },
                    value: initialValue
                });
            }
        },
        onMenuScrollToBottom: ()=>{
            void getResults({
                lastFullyLoadedRelation,
                search,
                sort: false,
                value: initialValue
            });
        },
        options: options,
        showError: showError,
        value: valueToRender ?? null
    }), !readOnly && allowCreate && /*#__PURE__*/ _react.default.createElement(_AddNew.AddNewRelation, {
        dispatchOptions,
        hasMany,
        options,
        path: pathOrName,
        relationTo,
        setValue,
        value
    })), errorLoading && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__error-loading`
    }, errorLoading), /*#__PURE__*/ _react.default.createElement(_FieldDescription.default, {
        description: description,
        path: path,
        value: value
    }));
};
const _default = (0, _withCondition.default)(Relationship);

//# sourceMappingURL=data:application/json;base64,