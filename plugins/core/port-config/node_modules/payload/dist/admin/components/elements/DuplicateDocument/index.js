"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _modal = require("@faceless-ui/modal");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _reacttoastify = require("react-toastify");
const _getTranslation = require("../../../../utilities/getTranslation");
const _api = require("../../../api");
const _context = require("../../forms/Form/context");
const _Minimal = /*#__PURE__*/ _interop_require_default(require("../../templates/Minimal"));
const _Config = require("../../utilities/Config");
const _Button = /*#__PURE__*/ _interop_require_default(require("../Button"));
const _PopupButtonList = /*#__PURE__*/ _interop_require_wildcard(require("../Popup/PopupButtonList"));
const _baseBeforeDuplicate = require("./baseBeforeDuplicate");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'duplicate';
const Duplicate = ({ id, slug, collection })=>{
    const { push } = (0, _reactrouterdom.useHistory)();
    const modified = (0, _context.useFormModified)();
    const { toggleModal } = (0, _modal.useModal)();
    const { setModified } = (0, _context.useForm)();
    const { localization, routes: { api }, serverURL } = (0, _Config.useConfig)();
    const { routes: { admin } } = (0, _Config.useConfig)();
    const [hasClicked, setHasClicked] = (0, _react.useState)(false);
    const [isSubmitting, setIsSubmitting] = (0, _react.useState)(false);
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    const modalSlug = `duplicate-${id}`;
    const handleClick = (0, _react.useCallback)(async (override = false)=>{
        if (isSubmitting) return;
        setIsSubmitting(true);
        setHasClicked(true);
        if (modified && !override) {
            toggleModal(modalSlug);
            return;
        }
        const saveDocument = async ({ id, duplicateID = '', locale = '' })=>{
            const response = await _api.requests.get(`${serverURL}${api}/${slug}/${id}`, {
                headers: {
                    'Accept-Language': i18n.language
                },
                params: {
                    depth: 0,
                    draft: true,
                    'fallback-locale': 'none',
                    locale
                }
            });
            let data = await response.json();
            data = (0, _baseBeforeDuplicate.baseBeforeDuplicate)({
                collection,
                data,
                locale
            });
            if (typeof collection.admin.hooks?.beforeDuplicate === 'function') {
                data = await collection.admin.hooks.beforeDuplicate({
                    collection,
                    data,
                    locale
                });
            }
            delete data['id'];
            if (!duplicateID) {
                if ('createdAt' in data) delete data.createdAt;
                if ('updatedAt' in data) delete data.updatedAt;
            }
            const result = await _api.requests[duplicateID ? 'patch' : 'post'](`${serverURL}${api}/${slug}/${duplicateID}?locale=${locale}&fallback-locale=none`, {
                body: JSON.stringify(data),
                headers: {
                    'Accept-Language': i18n.language,
                    'Content-Type': 'application/json'
                }
            });
            const json = await result.json();
            if (result.status === 201 || result.status === 200) {
                return json.doc.id;
            }
            // only show the error if this is the initial request failing
            if (!duplicateID) {
                json.errors.forEach((error)=>_reacttoastify.toast.error(error.message));
            }
            return null;
        };
        let duplicateID;
        let abort = false;
        const localeErrors = [];
        if (localization) {
            await localization.localeCodes.reduce(async (priorLocalePatch, locale)=>{
                await priorLocalePatch;
                if (abort) return;
                const localeResult = await saveDocument({
                    id,
                    duplicateID,
                    locale
                });
                duplicateID = localeResult || duplicateID;
                if (duplicateID && !localeResult) {
                    localeErrors.push(locale);
                }
                if (!duplicateID) {
                    abort = true;
                }
            }, Promise.resolve());
        } else {
            duplicateID = await saveDocument({
                id
            });
        }
        if (!duplicateID) {
            // document was not saved, error toast was displayed
            return;
        }
        _reacttoastify.toast.success(t('successfullyDuplicated', {
            label: (0, _getTranslation.getTranslation)(collection.labels.singular, i18n)
        }), {
            autoClose: 3000
        });
        if (localeErrors.length > 0) {
            _reacttoastify.toast.error(`
          ${t('error:localesNotSaved_other', {
                count: localeErrors.length
            })}
          ${localeErrors.join(', ')}
          `, {
                autoClose: 5000
            });
        }
        setModified(false);
        setIsSubmitting(false);
        setTimeout(()=>{
            push({
                pathname: `${admin}/collections/${slug}/${duplicateID}`
            });
        }, 10);
    }, [
        modified,
        localization,
        t,
        i18n,
        collection,
        setModified,
        toggleModal,
        modalSlug,
        serverURL,
        api,
        slug,
        id,
        push,
        admin
    ]);
    const confirm = (0, _react.useCallback)(async ()=>{
        await handleClick(true);
        setHasClicked(false);
    }, [
        handleClick
    ]);
    return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement(_PopupButtonList.Button, {
        disabled: isSubmitting,
        id: "action-duplicate",
        onClick: ()=>handleClick(false)
    }, t('duplicate')), modified && hasClicked && /*#__PURE__*/ _react.default.createElement(_modal.Modal, {
        className: `${baseClass}__modal`,
        slug: modalSlug
    }, /*#__PURE__*/ _react.default.createElement(_Minimal.default, {
        className: `${baseClass}__modal-template`
    }, /*#__PURE__*/ _react.default.createElement("h1", null, t('confirmDuplication')), /*#__PURE__*/ _react.default.createElement("p", null, t('unsavedChangesDuplicate')), /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "secondary",
        id: "confirm-cancel",
        onClick: ()=>toggleModal(modalSlug),
        type: "button"
    }, t('cancel')), /*#__PURE__*/ _react.default.createElement(_Button.default, {
        id: "confirm-duplicate",
        onClick: confirm
    }, t('duplicateWithoutSaving')))));
};
const _default = Duplicate;

//# sourceMappingURL=data:application/json;base64,