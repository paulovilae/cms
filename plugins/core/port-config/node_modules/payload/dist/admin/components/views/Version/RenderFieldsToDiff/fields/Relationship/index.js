"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reactdiffviewercontinued = /*#__PURE__*/ _interop_require_default(require("react-diff-viewer-continued"));
const _reacti18next = require("react-i18next");
const _types = require("../../../../../../../fields/config/types");
const _getTranslation = require("../../../../../../../utilities/getTranslation");
const _useUseAsTitle = require("../../../../../../hooks/useUseAsTitle");
const _Config = require("../../../../../utilities/Config");
const _Locale = require("../../../../../utilities/Locale");
const _Label = /*#__PURE__*/ _interop_require_default(require("../../Label"));
const _styles = require("../styles");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const baseClass = 'relationship-diff';
const generateLabelFromValue = (collections, field, locale, value)=>{
    if (Array.isArray(value)) {
        return value.map((v)=>generateLabelFromValue(collections, field, locale, v)).filter(Boolean) // Filters out any undefined or empty values
        .join(', ');
    }
    let relatedDoc;
    let valueToReturn = '';
    if (value === null || typeof value === 'undefined') {
        return String(value);
    }
    const relationTo = 'relationTo' in field ? field.relationTo : undefined;
    if (value === null || typeof value === 'undefined') {
        return String(value);
    }
    if (typeof value === 'object' && 'relationTo' in value) {
        relatedDoc = value.value;
    } else {
        // Non-polymorphic relationship
        relatedDoc = value;
    }
    const relatedCollection = relationTo ? collections.find((c)=>c.slug === (typeof value === 'object' && 'relationTo' in value ? value.relationTo : relationTo)) : null;
    if (relatedCollection) {
        const useAsTitle = relatedCollection?.admin?.useAsTitle;
        const useAsTitleField = (0, _useUseAsTitle.useUseTitleField)(relatedCollection);
        let titleFieldIsLocalized = false;
        if (useAsTitleField && (0, _types.fieldAffectsData)(useAsTitleField)) {
            titleFieldIsLocalized = useAsTitleField.localized;
        }
        if (typeof relatedDoc?.[useAsTitle] !== 'undefined') {
            valueToReturn = relatedDoc[useAsTitle];
        } else if (typeof relatedDoc?.id !== 'undefined') {
            valueToReturn = relatedDoc.id;
        } else {
            valueToReturn = relatedDoc;
        }
        if (typeof valueToReturn === 'object' && titleFieldIsLocalized) {
            valueToReturn = valueToReturn[locale];
        }
    } else if (relatedDoc) {
        // Handle non-polymorphic `hasMany` relationships or fallback
        if (typeof relatedDoc.id !== 'undefined') {
            valueToReturn = relatedDoc.id;
        } else {
            valueToReturn = relatedDoc;
        }
    }
    if (typeof valueToReturn === 'object' && valueToReturn !== null) {
        valueToReturn = JSON.stringify(valueToReturn);
    }
    return valueToReturn;
};
const Relationship = ({ comparison, field, version })=>{
    const { collections } = (0, _Config.useConfig)();
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    const { code: locale } = (0, _Locale.useLocale)();
    const placeholder = `[${t('noValue')}]`;
    let versionToRender = placeholder;
    let comparisonToRender = placeholder;
    if (version) {
        if ('hasMany' in field && field.hasMany && Array.isArray(version)) {
            versionToRender = version.map((val)=>generateLabelFromValue(collections, field, locale, val)).join(', ') || placeholder;
        } else {
            versionToRender = generateLabelFromValue(collections, field, locale, version) || placeholder;
        }
    }
    if (comparison) {
        if ('hasMany' in field && field.hasMany && Array.isArray(comparison)) {
            comparisonToRender = comparison.map((val)=>generateLabelFromValue(collections, field, locale, val)).join(', ') || placeholder;
        } else {
            comparisonToRender = generateLabelFromValue(collections, field, locale, comparison) || placeholder;
        }
    }
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: baseClass
    }, /*#__PURE__*/ _react.default.createElement(_Label.default, null, locale && /*#__PURE__*/ _react.default.createElement("span", {
        className: `${baseClass}__locale-label`
    }, locale), (0, _getTranslation.getTranslation)(field.label, i18n)), /*#__PURE__*/ _react.default.createElement(_reactdiffviewercontinued.default, {
        hideLineNumbers: true,
        newValue: typeof versionToRender !== 'undefined' ? String(versionToRender) : placeholder,
        oldValue: typeof comparisonToRender !== 'undefined' ? String(comparisonToRender) : placeholder,
        showDiffOnly: false,
        splitView: true,
        styles: _styles.diffStyles
    }));
};
const _default = Relationship;

//# sourceMappingURL=data:application/json;base64,