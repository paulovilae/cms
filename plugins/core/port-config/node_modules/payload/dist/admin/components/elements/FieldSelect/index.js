"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    FieldSelect: function() {
        return FieldSelect;
    },
    combineLabel: function() {
        return combineLabel;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _types = require("../../../../fields/config/types");
const _getTranslation = require("../../../../utilities/getTranslation");
const _context = require("../../forms/Form/context");
const _createNestedFieldPath = require("../../forms/Form/createNestedFieldPath");
const _Label = /*#__PURE__*/ _interop_require_default(require("../../forms/Label"));
const _ReactSelect = /*#__PURE__*/ _interop_require_default(require("../ReactSelect"));
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'field-select';
const combineLabel = (prefix, field, i18n)=>`${prefix === '' ? '' : `${prefix} > `}${(0, _getTranslation.getTranslation)(field.label || field.name, i18n) || ''}`;
const reduceFields = (fields, i18n, path = '', labelPrefix = '')=>fields.reduce((fieldsToUse, field)=>{
        // escape for a variety of reasons
        if ((0, _types.fieldAffectsData)(field) && (field.admin?.disableBulkEdit || field.unique || field.hidden || field.admin?.hidden || field.admin?.readOnly)) {
            return fieldsToUse;
        }
        if (field.type === 'collapsible') {
            return [
                ...fieldsToUse,
                ...reduceFields(field.fields, i18n, path, labelPrefix)
            ];
        }
        if (!(field.type === 'array' || field.type === 'blocks') && (0, _types.fieldHasSubFields)(field)) {
            return [
                ...fieldsToUse,
                ...reduceFields(field.fields, i18n, (0, _createNestedFieldPath.createNestedFieldPath)(path, field), combineLabel(labelPrefix, field, i18n))
            ];
        }
        if (field.type === 'tabs') {
            return [
                ...fieldsToUse,
                ...field.tabs.reduce((tabFields, tab)=>{
                    return [
                        ...tabFields,
                        ...reduceFields(tab.fields, i18n, (0, _types.tabHasName)(tab) ? (0, _createNestedFieldPath.createNestedFieldPath)(path, field) : path, combineLabel(labelPrefix, field, i18n))
                    ];
                }, [])
            ];
        }
        const formattedField = {
            label: combineLabel(labelPrefix, field, i18n),
            value: {
                ...field,
                path: (0, _createNestedFieldPath.createNestedFieldPath)(path, field)
            }
        };
        return [
            ...fieldsToUse,
            formattedField
        ];
    }, []);
const FieldSelect = ({ fields, setSelected })=>{
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    const [options] = (0, _react.useState)(()=>reduceFields(fields, i18n));
    const { dispatchFields, getFields } = (0, _context.useForm)();
    const handleChange = (selected)=>{
        const activeFields = getFields();
        if (selected === null) {
            setSelected([]);
        } else {
            setSelected(selected.map(({ value })=>value));
        }
        // remove deselected values from form state
        if (selected === null || Object.keys(activeFields).length > selected.length) {
            Object.keys(activeFields).forEach((path)=>{
                if (selected === null || !selected.find((field)=>{
                    return field.value.path === path;
                })) {
                    dispatchFields({
                        path,
                        type: 'REMOVE'
                    });
                }
            });
        }
    };
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: baseClass
    }, /*#__PURE__*/ _react.default.createElement(_Label.default, {
        label: t('fields:selectFieldsToEdit')
    }), /*#__PURE__*/ _react.default.createElement(_ReactSelect.default, {
        isMulti: true,
        onChange: handleChange,
        options: options
    }));
};

//# sourceMappingURL=data:application/json;base64,