/* eslint-disable @typescript-eslint/no-explicit-any */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

//# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["../../../src/collections/config/types.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { Response } from 'express'\nimport type { GraphQLInputObjectType, GraphQLNonNull, GraphQLObjectType } from 'graphql'\nimport type { DeepRequired } from 'ts-essentials'\n\nimport type { DatabaseAdapter, GeneratedTypes } from '../../'\nimport type {\n  CustomPreviewButtonProps,\n  CustomPublishButtonType,\n  CustomSaveButtonProps,\n  CustomSaveDraftButtonProps,\n} from '../../admin/components/elements/types'\nimport type { Props as ListProps } from '../../admin/components/views/collections/List/types'\nimport type { Arguments as MeArguments } from '../../auth/operations/me'\nimport type {\n  Arguments as RefreshArguments,\n  Result as RefreshResult,\n} from '../../auth/operations/refresh'\nimport type { Auth, IncomingAuthType, User } from '../../auth/types'\nimport type {\n  Access,\n  AdminViewComponent,\n  EditViewConfig,\n  Endpoint,\n  EntityDescription,\n  GeneratePreviewURL,\n  LivePreviewConfig,\n} from '../../config/types'\nimport type { DBIdentifierName } from '../../database/types'\nimport type { PayloadRequest, RequestContext } from '../../express/types'\nimport type { Field } from '../../fields/config/types'\nimport type { IncomingUploadType, Upload } from '../../uploads/types'\nimport type { IncomingCollectionVersions, SanitizedCollectionVersions } from '../../versions/types'\nimport type { AfterOperationArg, AfterOperationMap } from '../operations/utils'\n\nexport type HookOperationType =\n  | 'autosave'\n  | 'count'\n  | 'create'\n  | 'delete'\n  | 'forgotPassword'\n  | 'login'\n  | 'read'\n  | 'refresh'\n  | 'update'\n\ntype CreateOrUpdateOperation = Extract<HookOperationType, 'create' | 'update'>\n\nexport type BeforeOperationHook = (args: {\n  args?: any\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  /**\n   * Hook operation being performed\n   */\n  operation: HookOperationType\n  req: PayloadRequest\n}) => any\n\nexport type BeforeValidateHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  data?: Partial<T>\n  /**\n   * Hook operation being performed\n   */\n  operation: CreateOrUpdateOperation\n  /**\n   * Original document before change\n   *\n   * `undefined` on 'create' operation\n   */\n  originalDoc?: T\n  req: PayloadRequest\n}) => any\n\nexport type BeforeChangeHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  data: Partial<T>\n  /**\n   * Hook operation being performed\n   */\n  operation: CreateOrUpdateOperation\n  /**\n   * Original document before change\n   *\n   * `undefined` on 'create' operation\n   */\n  originalDoc?: T\n  req: PayloadRequest\n}) => any\n\nexport type AfterChangeHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  doc: T\n  /**\n   * Hook operation being performed\n   */\n  operation: CreateOrUpdateOperation\n  previousDoc: T\n  req: PayloadRequest\n}) => any\n\nexport type BeforeReadHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  doc: T\n  query: {\n    [key: string]: any\n  }\n  req: PayloadRequest\n}) => any\n\nexport type AfterReadHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  doc: T\n  findMany?: boolean\n  query?: {\n    [key: string]: any\n  }\n  req: PayloadRequest\n}) => any\n\nexport type BeforeDeleteHook = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  id: number | string\n  req: PayloadRequest\n}) => any\n\nexport type AfterDeleteHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  doc: T\n  id: number | string\n  req: PayloadRequest\n}) => any\n\nexport type AfterOperationHook<T extends TypeWithID = any> = (\n  arg: AfterOperationArg<T>,\n) => Promise<ReturnType<AfterOperationMap<T>[keyof AfterOperationMap<T>]>>\n\nexport type AfterErrorHook = (\n  err: Error,\n  res: unknown,\n  context: RequestContext,\n  /** The collection which this hook is being run on. This is null if the AfterError hook was be added to the payload-wide config */\n  collection: SanitizedCollectionConfig | null,\n) => {\n  response: any\n  status: number\n} | void\n\nexport type BeforeLoginHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  req: PayloadRequest\n  user: T\n}) => any\n\nexport type AfterLoginHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  req: PayloadRequest\n  token: string\n  user: T\n}) => any\n\nexport type AfterLogoutHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  req: PayloadRequest\n  res: Response\n}) => any\n\nexport type AfterMeHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  req: PayloadRequest\n  response: unknown\n}) => any\n\nexport type RefreshHook<T extends TypeWithID = any> = (args: {\n  args: RefreshArguments\n  user: T\n}) => Promise<RefreshResult | void> | (RefreshResult | void)\n\nexport type MeHook<T extends TypeWithID = any> = (args: {\n  args: MeArguments\n  user: T\n}) => ({ exp: number; user: T } | void) | Promise<{ exp: number; user: T } | void>\n\nexport type AfterRefreshHook<T extends TypeWithID = any> = (args: {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n  exp: number\n  req: PayloadRequest\n  res: Response\n  token: string\n}) => any\n\nexport type AfterForgotPasswordHook = (args: {\n  args?: any\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  context: RequestContext\n}) => any\n\ntype BeforeDuplicateArgs<T> = {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  data: T\n  locale?: string\n}\n\nexport type BeforeDuplicate<T = any> = (args: BeforeDuplicateArgs<T>) => Promise<T> | T\n\nexport type CollectionAdminOptions = {\n  /**\n   * Custom admin components\n   */\n  components?: {\n    AfterList?: React.ComponentType<ListProps>[]\n    AfterListTable?: React.ComponentType<ListProps>[]\n    BeforeList?: React.ComponentType<ListProps>[]\n    BeforeListTable?: React.ComponentType<ListProps>[]\n    /**\n     * Components within the edit view\n     */\n    edit?: {\n      /**\n       * Replaces the \"Preview\" button\n       */\n      PreviewButton?: CustomPreviewButtonProps\n      /**\n       * Replaces the \"Publish\" button\n       * + drafts must be enabled\n       */\n      PublishButton?: CustomPublishButtonType\n      /**\n       * Replaces the \"Save\" button\n       * + drafts must be disabled\n       */\n      SaveButton?: CustomSaveButtonProps\n      /**\n       * Replaces the \"Save Draft\" button\n       * + drafts must be enabled\n       * + autosave must be disabled\n       */\n      SaveDraftButton?: CustomSaveDraftButtonProps\n    }\n    views?: {\n      /**\n       * Set to a React component to replace the entire \"Edit\" view, including all nested routes.\n       * Set to an object to replace or modify individual nested routes, or to add new ones.\n       */\n      Edit?:\n        | (\n            | {\n                /**\n                 * Replace or modify individual nested routes, or add new ones:\n                 * + `Default` - `/admin/collections/:collection/:id`\n                 * + `API` - `/admin/collections/:collection/:id/api`\n                 * + `LivePreview` - `/admin/collections/:collection/:id/preview`\n                 * + `References` - `/admin/collections/:collection/:id/references`\n                 * + `Relationships` - `/admin/collections/:collection/:id/relationships`\n                 * + `Versions` - `/admin/collections/:collection/:id/versions`\n                 * + `Version` - `/admin/collections/:collection/:id/versions/:version`\n                 * + `CustomView` - `/admin/collections/:collection/:id/:path`\n                 */\n                API?: AdminViewComponent | Partial<EditViewConfig>\n                Default?: AdminViewComponent | Partial<EditViewConfig>\n                LivePreview?: AdminViewComponent | Partial<EditViewConfig>\n                Version?: AdminViewComponent | Partial<EditViewConfig>\n                Versions?: AdminViewComponent | Partial<EditViewConfig>\n                // TODO: uncomment these as they are built\n                // References?: EditView\n                // Relationships?: EditView\n              }\n            | {\n                [key: string]: EditViewConfig\n              }\n          )\n        | AdminViewComponent\n      List?:\n        | {\n            Component?: React.ComponentType<ListProps>\n            actions?: React.ComponentType<any>[]\n          }\n        | React.ComponentType<ListProps>\n    }\n  }\n  /**\n   * Default columns to show in list view\n   */\n  defaultColumns?: string[]\n  /**\n   * Custom description for collection\n   */\n  description?: EntityDescription\n  disableDuplicate?: boolean\n  enableRichTextLink?: boolean\n  enableRichTextRelationship?: boolean\n  /**\n   * Forces all fields in the Edit view to render immediately, regardless of scroll position\n   * @default false\n   */\n  forceRenderAllFields?: boolean\n  /**\n   * Place collections into a navigational group\n   * */\n  group?: Record<string, string> | string\n  /**\n   * Exclude the collection from the admin nav and routes\n   */\n  hidden?: ((args: { user: User }) => boolean) | boolean\n  /**\n   * Hide the API URL within the Edit view\n   */\n  hideAPIURL?: boolean\n  hooks?: {\n    /**\n     * Function that allows you to modify a document's data before it is duplicated\n     */\n    beforeDuplicate?: BeforeDuplicate\n  }\n  /**\n   * Additional fields to be searched via the full text search\n   */\n  listSearchableFields?: string[]\n  /**\n   * Live preview options\n   */\n  livePreview?: LivePreviewConfig\n  pagination?: {\n    defaultLimit?: number\n    limits?: number[]\n  }\n  /**\n   * Function to generate custom preview URL\n   */\n  preview?: GeneratePreviewURL\n  /**\n   * Field to use as title in Edit view and first column in List view\n   */\n  useAsTitle?: string\n}\n\n/** Manage all aspects of a data collection */\nexport type CollectionConfig = {\n  /**\n   * Access control\n   */\n  access?: {\n    admin?: (args?: any) => Promise<boolean> | boolean\n    create?: Access\n    delete?: Access\n    read?: Access\n    readVersions?: Access\n    unlock?: Access\n    update?: Access\n  }\n  /**\n   * Collection admin options\n   */\n  admin?: CollectionAdminOptions\n  /**\n   * Collection login options\n   *\n   * Use `true` to enable with default options\n   */\n  auth?: IncomingAuthType | boolean\n  /** Extension point to add your custom data. */\n  custom?: Record<string, any>\n\n  /**\n   * Add a custom database adapter to this collection.\n   */\n  db?: Pick<\n    DatabaseAdapter,\n    'create' | 'deleteMany' | 'deleteOne' | 'find' | 'findOne' | 'updateOne'\n  >\n  /**\n   * Used to override the default naming of the database table or collection with your using a function or string\n   * @WARNING: If you change this property with existing data, you will need to handle the renaming of the table in your database or by using migrations\n   */\n  dbName?: DBIdentifierName\n  /**\n   * Default field to sort by in collection list view\n   */\n  defaultSort?: string\n  /**\n   * Custom rest api endpoints, set false to disable all rest endpoints for this collection.\n   */\n  endpoints?: Omit<Endpoint, 'root'>[] | false\n  fields: Field[]\n  /**\n   * GraphQL configuration\n   */\n  graphQL?:\n    | {\n        pluralName?: string\n        singularName?: string\n      }\n    | false\n  /**\n   * Hooks to modify Payload functionality\n   */\n  hooks?: {\n    afterChange?: AfterChangeHook[]\n    afterDelete?: AfterDeleteHook[]\n    afterError?: AfterErrorHook\n    afterForgotPassword?: AfterForgotPasswordHook[]\n    afterLogin?: AfterLoginHook[]\n    afterLogout?: AfterLogoutHook[]\n    afterMe?: AfterMeHook[]\n    afterOperation?: AfterOperationHook[]\n    afterRead?: AfterReadHook[]\n    afterRefresh?: AfterRefreshHook[]\n    beforeChange?: BeforeChangeHook[]\n    beforeDelete?: BeforeDeleteHook[]\n    beforeLogin?: BeforeLoginHook[]\n    beforeOperation?: BeforeOperationHook[]\n    beforeRead?: BeforeReadHook[]\n    beforeValidate?: BeforeValidateHook[]\n    /**\n     * Use the `me` hook to control the `me` operation.\n     * Here, you can optionally instruct the me operation to return early,\n     * and skip its default logic.\n     */\n    me?: MeHook[]\n    /**\n     * Use the `refresh` hook to control the refresh operation.\n     * Here, you can optionally instruct the refresh operation to return early,\n     * and skip its default logic.\n     */\n    refresh?: RefreshHook[]\n  }\n  /**\n   * Label configuration\n   */\n  labels?: {\n    plural?: Record<string, string> | string\n    singular?: Record<string, string> | string\n  }\n  slug: string\n  /**\n   * Add `createdAt` and `updatedAt` fields\n   *\n   * @default true\n   */\n  timestamps?: boolean\n  /**\n   * Options used in typescript generation\n   */\n  typescript?: {\n    /**\n     * Typescript generation name given to the interface type\n     */\n    interface?: string\n  }\n  /**\n   * Customize the handling of incoming file uploads\n   *\n   * @default false // disable uploads\n   */\n  upload?: IncomingUploadType | boolean\n\n  /**\n   * Customize the handling of incoming file uploads\n   *\n   * @default false // disable versioning\n   */\n  versions?: IncomingCollectionVersions | boolean\n}\n\nexport interface SanitizedCollectionConfig\n  extends Omit<\n    DeepRequired<CollectionConfig>,\n    'auth' | 'endpoints' | 'fields' | 'upload' | 'versions'\n  > {\n  auth: Auth\n  endpoints: Omit<Endpoint, 'root'>[] | false\n  fields: Field[]\n  upload: Upload\n  versions: SanitizedCollectionVersions\n}\n\nexport type Collection = {\n  config: SanitizedCollectionConfig\n  graphQL?: {\n    JWT: GraphQLObjectType\n    countType: GraphQLObjectType\n    mutationInputType: GraphQLNonNull<any>\n    paginatedType: GraphQLObjectType\n    type: GraphQLObjectType\n    updateMutationInputType: GraphQLNonNull<any>\n    versionType: GraphQLObjectType\n    whereInputType: GraphQLInputObjectType\n  }\n}\n\nexport type BulkOperationResult<TSlug extends keyof GeneratedTypes['collections']> = {\n  docs: GeneratedTypes['collections'][TSlug][]\n  errors: {\n    id: GeneratedTypes['collections'][TSlug]['id']\n    message: string\n  }[]\n}\n\nexport type AuthCollection = {\n  config: SanitizedCollectionConfig\n}\n\nexport type TypeWithID = {\n  id: number | string\n}\n\nexport type TypeWithTimestamps = {\n  [key: string]: unknown\n  createdAt: string\n  id: number | string\n  updatedAt: string\n}\n"],"names":[],"rangeMappings":"","mappings":"AAAA,qDAAqD"}