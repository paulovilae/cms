"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _executeAccess = /*#__PURE__*/ _interop_require_default(require("../../auth/executeAccess"));
const _types = require("../../auth/types");
const _combineQueries = require("../../database/combineQueries");
const _errors = require("../../errors");
const _afterRead = require("../../fields/hooks/afterRead");
const _deleteUserPreferences = require("../../preferences/deleteUserPreferences");
const _deleteAssociatedFiles = require("../../uploads/deleteAssociatedFiles");
const _commitTransaction = require("../../utilities/commitTransaction");
const _initTransaction = require("../../utilities/initTransaction");
const _killTransaction = require("../../utilities/killTransaction");
const _deleteCollectionVersions = require("../../versions/deleteCollectionVersions");
const _utils = require("./utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function deleteByID(incomingArgs) {
    let args = incomingArgs;
    try {
        const shouldCommit = await (0, _initTransaction.initTransaction)(args.req);
        // /////////////////////////////////////
        // beforeOperation - Collection
        // /////////////////////////////////////
        await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook)=>{
            await priorHook;
            args = await hook({
                args,
                collection: args.collection.config,
                context: args.req.context,
                operation: 'delete',
                req: args.req
            }) || args;
        }, Promise.resolve());
        const { id, collection: { config: collectionConfig }, depth, overrideAccess, req: { fallbackLocale, locale, payload: { config }, payload, t }, req, showHiddenFields } = args;
        // /////////////////////////////////////
        // Access
        // /////////////////////////////////////
        const accessResults = !overrideAccess ? await (0, _executeAccess.default)({
            id,
            req
        }, collectionConfig.access.delete) : true;
        const hasWhereAccess = (0, _types.hasWhereAccessResult)(accessResults);
        // /////////////////////////////////////
        // beforeDelete - Collection
        // /////////////////////////////////////
        await collectionConfig.hooks.beforeDelete.reduce(async (priorHook, hook)=>{
            await priorHook;
            return hook({
                id,
                collection: collectionConfig,
                context: req.context,
                req
            });
        }, Promise.resolve());
        // /////////////////////////////////////
        // Retrieve document
        // /////////////////////////////////////
        let docToDelete;
        const dbArgs = {
            collection: collectionConfig.slug,
            locale: req.locale,
            req,
            where: (0, _combineQueries.combineQueries)({
                id: {
                    equals: id
                }
            }, accessResults)
        };
        if (collectionConfig?.db?.findOne) {
            docToDelete = await collectionConfig.db.findOne(dbArgs);
        } else {
            docToDelete = await req.payload.db.findOne(dbArgs);
        }
        if (!docToDelete && !hasWhereAccess) throw new _errors.NotFound(t);
        if (!docToDelete && hasWhereAccess) throw new _errors.Forbidden(t);
        await (0, _deleteAssociatedFiles.deleteAssociatedFiles)({
            collectionConfig,
            config,
            doc: docToDelete,
            overrideDelete: true,
            t
        });
        // /////////////////////////////////////
        // Delete versions
        // /////////////////////////////////////
        if (collectionConfig.versions) {
            await (0, _deleteCollectionVersions.deleteCollectionVersions)({
                id,
                slug: collectionConfig.slug,
                payload,
                req
            });
        }
        // /////////////////////////////////////
        // Delete document
        // /////////////////////////////////////
        let result;
        const deleteOneArgs = {
            collection: collectionConfig.slug,
            req,
            where: {
                id: {
                    equals: id
                }
            }
        };
        if (collectionConfig?.db?.deleteOne) {
            result = await collectionConfig?.db.deleteOne(deleteOneArgs);
        } else {
            result = await payload.db.deleteOne(deleteOneArgs);
        }
        // /////////////////////////////////////
        // Delete Preferences
        // /////////////////////////////////////
        await (0, _deleteUserPreferences.deleteUserPreferences)({
            collectionConfig,
            ids: [
                id
            ],
            payload,
            req
        });
        // /////////////////////////////////////
        // afterRead - Fields
        // /////////////////////////////////////
        result = await (0, _afterRead.afterRead)({
            collection: collectionConfig,
            context: req.context,
            depth,
            doc: result,
            draft: undefined,
            fallbackLocale,
            global: null,
            locale,
            overrideAccess,
            req,
            showHiddenFields
        });
        // /////////////////////////////////////
        // afterRead - Collection
        // /////////////////////////////////////
        await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook)=>{
            await priorHook;
            result = await hook({
                collection: collectionConfig,
                context: req.context,
                doc: result,
                req
            }) || result;
        }, Promise.resolve());
        // /////////////////////////////////////
        // afterDelete - Collection
        // /////////////////////////////////////
        await collectionConfig.hooks.afterDelete.reduce(async (priorHook, hook)=>{
            await priorHook;
            result = await hook({
                id,
                collection: collectionConfig,
                context: req.context,
                doc: result,
                req
            }) || result;
        }, Promise.resolve());
        // /////////////////////////////////////
        // afterOperation - Collection
        // /////////////////////////////////////
        result = await (0, _utils.buildAfterOperation)({
            args,
            collection: collectionConfig,
            operation: 'deleteByID',
            result
        });
        // /////////////////////////////////////
        // 8. Return results
        // /////////////////////////////////////
        if (shouldCommit) await (0, _commitTransaction.commitTransaction)(req);
        return result;
    } catch (error) {
        await (0, _killTransaction.killTransaction)(args.req);
        throw error;
    }
}
const _default = deleteByID;

//# sourceMappingURL=data:application/json;base64,