{"version":3,"sources":["../../../src/collections/operations/findDistinct.ts"],"sourcesContent":["import httpStatus from 'http-status'\n\nimport type { AccessResult } from '../../config/types.js'\nimport type { PaginatedDistinctDocs } from '../../database/types.js'\nimport type { PayloadRequest, PopulateType, Sort, Where } from '../../types/index.js'\nimport type { Collection } from '../config/types.js'\n\nimport { executeAccess } from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport { sanitizeWhereQuery } from '../../database/sanitizeWhereQuery.js'\nimport { APIError } from '../../errors/APIError.js'\nimport { Forbidden } from '../../errors/Forbidden.js'\nimport { relationshipPopulationPromise } from '../../fields/hooks/afterRead/relationshipPopulationPromise.js'\nimport { getFieldByPath } from '../../utilities/getFieldByPath.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments = {\n  collection: Collection\n  depth?: number\n  disableErrors?: boolean\n  field: string\n  limit?: number\n  locale?: string\n  overrideAccess?: boolean\n  page?: number\n  populate?: PopulateType\n  req?: PayloadRequest\n  showHiddenFields?: boolean\n  sort?: Sort\n  where?: Where\n}\nexport const findDistinctOperation = async (\n  incomingArgs: Arguments,\n): Promise<PaginatedDistinctDocs<Record<string, unknown>>> => {\n  let args = incomingArgs\n\n  try {\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    if (args.collection.config.hooks?.beforeOperation?.length) {\n      for (const hook of args.collection.config.hooks.beforeOperation) {\n        args =\n          (await hook({\n            args,\n            collection: args.collection.config,\n            context: args.req!.context,\n            operation: 'readDistinct',\n            req: args.req!,\n          })) || args\n      }\n    }\n\n    const {\n      collection: { config: collectionConfig },\n      disableErrors,\n      overrideAccess,\n      populate,\n      showHiddenFields = false,\n      where,\n    } = args\n\n    const req = args.req!\n    const { locale, payload } = req\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    let accessResult: AccessResult\n\n    if (!overrideAccess) {\n      accessResult = await executeAccess({ disableErrors, req }, collectionConfig.access.read)\n\n      // If errors are disabled, and access returns false, return empty results\n      if (accessResult === false) {\n        return {\n          hasNextPage: false,\n          hasPrevPage: false,\n          limit: args.limit || 0,\n          nextPage: null,\n          page: 1,\n          pagingCounter: 1,\n          prevPage: null,\n          totalDocs: 0,\n          totalPages: 0,\n          values: [],\n        }\n      }\n    }\n\n    // /////////////////////////////////////\n    // Find Distinct\n    // /////////////////////////////////////\n\n    const fullWhere = combineQueries(where!, accessResult!)\n    sanitizeWhereQuery({ fields: collectionConfig.flattenedFields, payload, where: fullWhere })\n\n    await validateQueryPaths({\n      collectionConfig,\n      overrideAccess: overrideAccess!,\n      req,\n      where: where ?? {},\n    })\n\n    const fieldResult = getFieldByPath({\n      fields: collectionConfig.flattenedFields,\n      path: args.field,\n    })\n\n    if (!fieldResult) {\n      throw new APIError(\n        `Field ${args.field} was not found in the collection ${collectionConfig.slug}`,\n        httpStatus.BAD_REQUEST,\n      )\n    }\n\n    if (fieldResult.field.hidden && !showHiddenFields) {\n      throw new Forbidden(req.t)\n    }\n\n    if (fieldResult.field.access?.read) {\n      const hasAccess = await fieldResult.field.access.read({ req })\n      if (!hasAccess) {\n        throw new Forbidden(req.t)\n      }\n    }\n\n    let result = await payload.db.findDistinct({\n      collection: collectionConfig.slug,\n      field: args.field,\n      limit: args.limit,\n      locale: locale!,\n      page: args.page,\n      req,\n      sort: args.sort,\n      where: fullWhere,\n    })\n\n    if (\n      (fieldResult.field.type === 'relationship' || fieldResult.field.type === 'upload') &&\n      args.depth\n    ) {\n      const populationPromises: Promise<void>[] = []\n      for (const doc of result.values) {\n        populationPromises.push(\n          relationshipPopulationPromise({\n            currentDepth: 0,\n            depth: args.depth,\n            draft: false,\n            fallbackLocale: req.fallbackLocale || null,\n            field: fieldResult.field,\n            locale: req.locale || null,\n            overrideAccess: args.overrideAccess ?? true,\n            parentIsLocalized: false,\n            populate,\n            req,\n            showHiddenFields: false,\n            siblingDoc: doc,\n          }),\n        )\n      }\n      await Promise.all(populationPromises)\n    }\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'findDistinct',\n      result,\n    })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req!)\n    throw error\n  }\n}\n"],"names":["httpStatus","executeAccess","combineQueries","validateQueryPaths","sanitizeWhereQuery","APIError","Forbidden","relationshipPopulationPromise","getFieldByPath","killTransaction","buildAfterOperation","findDistinctOperation","incomingArgs","args","collection","config","hooks","beforeOperation","length","hook","context","req","operation","collectionConfig","disableErrors","overrideAccess","populate","showHiddenFields","where","locale","payload","accessResult","access","read","hasNextPage","hasPrevPage","limit","nextPage","page","pagingCounter","prevPage","totalDocs","totalPages","values","fullWhere","fields","flattenedFields","fieldResult","path","field","slug","BAD_REQUEST","hidden","t","hasAccess","result","db","findDistinct","sort","type","depth","populationPromises","doc","push","currentDepth","draft","fallbackLocale","parentIsLocalized","siblingDoc","Promise","all","error"],"mappings":"AAAA,OAAOA,gBAAgB,cAAa;AAOpC,SAASC,aAAa,QAAQ,8BAA6B;AAC3D,SAASC,cAAc,QAAQ,mCAAkC;AACjE,SAASC,kBAAkB,QAAQ,uDAAsD;AACzF,SAASC,kBAAkB,QAAQ,uCAAsC;AACzE,SAASC,QAAQ,QAAQ,2BAA0B;AACnD,SAASC,SAAS,QAAQ,4BAA2B;AACrD,SAASC,6BAA6B,QAAQ,gEAA+D;AAC7G,SAASC,cAAc,QAAQ,oCAAmC;AAClE,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,mBAAmB,QAAQ,aAAY;AAiBhD,OAAO,MAAMC,wBAAwB,OACnCC;IAEA,IAAIC,OAAOD;IAEX,IAAI;QACF,wCAAwC;QACxC,+BAA+B;QAC/B,wCAAwC;QAExC,IAAIC,KAAKC,UAAU,CAACC,MAAM,CAACC,KAAK,EAAEC,iBAAiBC,QAAQ;YACzD,KAAK,MAAMC,QAAQN,KAAKC,UAAU,CAACC,MAAM,CAACC,KAAK,CAACC,eAAe,CAAE;gBAC/DJ,OACE,AAAC,MAAMM,KAAK;oBACVN;oBACAC,YAAYD,KAAKC,UAAU,CAACC,MAAM;oBAClCK,SAASP,KAAKQ,GAAG,CAAED,OAAO;oBAC1BE,WAAW;oBACXD,KAAKR,KAAKQ,GAAG;gBACf,MAAOR;YACX;QACF;QAEA,MAAM,EACJC,YAAY,EAAEC,QAAQQ,gBAAgB,EAAE,EACxCC,aAAa,EACbC,cAAc,EACdC,QAAQ,EACRC,mBAAmB,KAAK,EACxBC,KAAK,EACN,GAAGf;QAEJ,MAAMQ,MAAMR,KAAKQ,GAAG;QACpB,MAAM,EAAEQ,MAAM,EAAEC,OAAO,EAAE,GAAGT;QAE5B,wCAAwC;QACxC,SAAS;QACT,wCAAwC;QAExC,IAAIU;QAEJ,IAAI,CAACN,gBAAgB;YACnBM,eAAe,MAAM9B,cAAc;gBAAEuB;gBAAeH;YAAI,GAAGE,iBAAiBS,MAAM,CAACC,IAAI;YAEvF,yEAAyE;YACzE,IAAIF,iBAAiB,OAAO;gBAC1B,OAAO;oBACLG,aAAa;oBACbC,aAAa;oBACbC,OAAOvB,KAAKuB,KAAK,IAAI;oBACrBC,UAAU;oBACVC,MAAM;oBACNC,eAAe;oBACfC,UAAU;oBACVC,WAAW;oBACXC,YAAY;oBACZC,QAAQ,EAAE;gBACZ;YACF;QACF;QAEA,wCAAwC;QACxC,gBAAgB;QAChB,wCAAwC;QAExC,MAAMC,YAAY1C,eAAe0B,OAAQG;QACzC3B,mBAAmB;YAAEyC,QAAQtB,iBAAiBuB,eAAe;YAAEhB;YAASF,OAAOgB;QAAU;QAEzF,MAAMzC,mBAAmB;YACvBoB;YACAE,gBAAgBA;YAChBJ;YACAO,OAAOA,SAAS,CAAC;QACnB;QAEA,MAAMmB,cAAcvC,eAAe;YACjCqC,QAAQtB,iBAAiBuB,eAAe;YACxCE,MAAMnC,KAAKoC,KAAK;QAClB;QAEA,IAAI,CAACF,aAAa;YAChB,MAAM,IAAI1C,SACR,CAAC,MAAM,EAAEQ,KAAKoC,KAAK,CAAC,iCAAiC,EAAE1B,iBAAiB2B,IAAI,EAAE,EAC9ElD,WAAWmD,WAAW;QAE1B;QAEA,IAAIJ,YAAYE,KAAK,CAACG,MAAM,IAAI,CAACzB,kBAAkB;YACjD,MAAM,IAAIrB,UAAUe,IAAIgC,CAAC;QAC3B;QAEA,IAAIN,YAAYE,KAAK,CAACjB,MAAM,EAAEC,MAAM;YAClC,MAAMqB,YAAY,MAAMP,YAAYE,KAAK,CAACjB,MAAM,CAACC,IAAI,CAAC;gBAAEZ;YAAI;YAC5D,IAAI,CAACiC,WAAW;gBACd,MAAM,IAAIhD,UAAUe,IAAIgC,CAAC;YAC3B;QACF;QAEA,IAAIE,SAAS,MAAMzB,QAAQ0B,EAAE,CAACC,YAAY,CAAC;YACzC3C,YAAYS,iBAAiB2B,IAAI;YACjCD,OAAOpC,KAAKoC,KAAK;YACjBb,OAAOvB,KAAKuB,KAAK;YACjBP,QAAQA;YACRS,MAAMzB,KAAKyB,IAAI;YACfjB;YACAqC,MAAM7C,KAAK6C,IAAI;YACf9B,OAAOgB;QACT;QAEA,IACE,AAACG,CAAAA,YAAYE,KAAK,CAACU,IAAI,KAAK,kBAAkBZ,YAAYE,KAAK,CAACU,IAAI,KAAK,QAAO,KAChF9C,KAAK+C,KAAK,EACV;YACA,MAAMC,qBAAsC,EAAE;YAC9C,KAAK,MAAMC,OAAOP,OAAOZ,MAAM,CAAE;gBAC/BkB,mBAAmBE,IAAI,CACrBxD,8BAA8B;oBAC5ByD,cAAc;oBACdJ,OAAO/C,KAAK+C,KAAK;oBACjBK,OAAO;oBACPC,gBAAgB7C,IAAI6C,cAAc,IAAI;oBACtCjB,OAAOF,YAAYE,KAAK;oBACxBpB,QAAQR,IAAIQ,MAAM,IAAI;oBACtBJ,gBAAgBZ,KAAKY,cAAc,IAAI;oBACvC0C,mBAAmB;oBACnBzC;oBACAL;oBACAM,kBAAkB;oBAClByC,YAAYN;gBACd;YAEJ;YACA,MAAMO,QAAQC,GAAG,CAACT;QACpB;QAEA,wCAAwC;QACxC,8BAA8B;QAC9B,wCAAwC;QAExCN,SAAS,MAAM7C,oBAAoB;YACjCG;YACAC,YAAYS;YACZD,WAAW;YACXiC;QACF;QAEA,wCAAwC;QACxC,iBAAiB;QACjB,wCAAwC;QAExC,OAAOA;IACT,EAAE,OAAOgB,OAAgB;QACvB,MAAM9D,gBAAgBI,KAAKQ,GAAG;QAC9B,MAAMkD;IACR;AACF,EAAC"}